
kounaijiai_2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003684  08003684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003684  08003684  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003684  08003684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003698  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ef5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001554  00000000  00000000  00028f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002ae38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001677a  00000000  00000000  0002b730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073b2  00000000  00000000  00041eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008234e  00000000  00000000  0004925c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb5aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000cb628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800363c 	.word	0x0800363c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800363c 	.word	0x0800363c

080001c8 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


long map(long x, long in_min, long in_max, long out_min, long out_max)//値の�?囲の変換関数
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	69b9      	ldr	r1, [r7, #24]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1a8a      	subs	r2, r1, r2
 80001e2:	fb02 f203 	mul.w	r2, r2, r3
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	1acb      	subs	r3, r1, r3
 80001ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	4413      	add	r3, r2
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <motor1>:

void motor1(int dire,int duty)//右モーター
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	if(dire==0){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d119      	bne.n	8000244 <motor1+0x44>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(duty,0,100,0,9999));
 8000210:	f242 730f 	movw	r3, #9999	; 0x270f
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2264      	movs	r2, #100	; 0x64
 800021a:	2100      	movs	r1, #0
 800021c:	6838      	ldr	r0, [r7, #0]
 800021e:	f7ff ffd3 	bl	80001c8 <map>
 8000222:	4603      	mov	r3, r0
 8000224:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000228:	330f      	adds	r3, #15
 800022a:	4a28      	ldr	r2, [pc, #160]	; (80002cc <motor1+0xcc>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	6353      	str	r3, [r2, #52]	; 0x34
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000230:	2100      	movs	r1, #0
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <motor1+0xcc>)
 8000234:	f002 faee 	bl	8002814 <HAL_TIM_PWM_Start>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d042      	beq.n	80002c4 <motor1+0xc4>
				   					{
				   						Error_Handler();
 800023e:	f000 fc45 	bl	8000acc <Error_Handler>
			{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
			}

}
 8000242:	e03f      	b.n	80002c4 <motor1+0xc4>
	else if (dire==1){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d119      	bne.n	800027e <motor1+0x7e>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(duty,0,100,0,9999));
 800024a:	f242 730f 	movw	r3, #9999	; 0x270f
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2300      	movs	r3, #0
 8000252:	2264      	movs	r2, #100	; 0x64
 8000254:	2100      	movs	r1, #0
 8000256:	6838      	ldr	r0, [r7, #0]
 8000258:	f7ff ffb6 	bl	80001c8 <map>
 800025c:	4603      	mov	r3, r0
 800025e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000262:	330f      	adds	r3, #15
 8000264:	4a19      	ldr	r2, [pc, #100]	; (80002cc <motor1+0xcc>)
 8000266:	6812      	ldr	r2, [r2, #0]
 8000268:	6393      	str	r3, [r2, #56]	; 0x38
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800026a:	2104      	movs	r1, #4
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <motor1+0xcc>)
 800026e:	f002 fad1 	bl	8002814 <HAL_TIM_PWM_Start>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d025      	beq.n	80002c4 <motor1+0xc4>
			   							Error_Handler();
 8000278:	f000 fc28 	bl	8000acc <Error_Handler>
}
 800027c:	e022      	b.n	80002c4 <motor1+0xc4>
	else if(dire==2)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	d11f      	bne.n	80002c4 <motor1+0xc4>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
 8000284:	f242 730f 	movw	r3, #9999	; 0x270f
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2264      	movs	r2, #100	; 0x64
 800028e:	2100      	movs	r1, #0
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ff99 	bl	80001c8 <map>
 8000296:	4603      	mov	r3, r0
 8000298:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800029c:	330f      	adds	r3, #15
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <motor1+0xcc>)
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
 80002a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	2264      	movs	r2, #100	; 0x64
 80002ae:	2100      	movs	r1, #0
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ff89 	bl	80001c8 <map>
 80002b6:	4603      	mov	r3, r0
 80002b8:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80002bc:	330f      	adds	r3, #15
 80002be:	4a03      	ldr	r2, [pc, #12]	; (80002cc <motor1+0xcc>)
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000028 	.word	0x20000028

080002d0 <motor3>:

void motor3(int dire,int duty)//左モーター
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	if(dire==0){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d119      	bne.n	8000314 <motor3+0x44>

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(duty,0,100,0,9999));
 80002e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2300      	movs	r3, #0
 80002e8:	2264      	movs	r2, #100	; 0x64
 80002ea:	2100      	movs	r1, #0
 80002ec:	6838      	ldr	r0, [r7, #0]
 80002ee:	f7ff ff6b 	bl	80001c8 <map>
 80002f2:	4603      	mov	r3, r0
 80002f4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80002f8:	330f      	adds	r3, #15
 80002fa:	4a28      	ldr	r2, [pc, #160]	; (800039c <motor3+0xcc>)
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	63d3      	str	r3, [r2, #60]	; 0x3c
				   	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000300:	2108      	movs	r1, #8
 8000302:	4826      	ldr	r0, [pc, #152]	; (800039c <motor3+0xcc>)
 8000304:	f002 fa86 	bl	8002814 <HAL_TIM_PWM_Start>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d042      	beq.n	8000394 <motor3+0xc4>
				   					{
				   						Error_Handler();
 800030e:	f000 fbdd 	bl	8000acc <Error_Handler>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(0,0,100,0,9999));
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(0,0,100,0,9999));
		}


}
 8000312:	e03f      	b.n	8000394 <motor3+0xc4>
	else if(dire==1){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d119      	bne.n	800034e <motor3+0x7e>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(duty,0,100,0,9999));
 800031a:	f242 730f 	movw	r3, #9999	; 0x270f
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2264      	movs	r2, #100	; 0x64
 8000324:	2100      	movs	r1, #0
 8000326:	6838      	ldr	r0, [r7, #0]
 8000328:	f7ff ff4e 	bl	80001c8 <map>
 800032c:	4603      	mov	r3, r0
 800032e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000332:	330f      	adds	r3, #15
 8000334:	4a19      	ldr	r2, [pc, #100]	; (800039c <motor3+0xcc>)
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	6413      	str	r3, [r2, #64]	; 0x40
				   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800033a:	210c      	movs	r1, #12
 800033c:	4817      	ldr	r0, [pc, #92]	; (800039c <motor3+0xcc>)
 800033e:	f002 fa69 	bl	8002814 <HAL_TIM_PWM_Start>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d025      	beq.n	8000394 <motor3+0xc4>
				   							Error_Handler();
 8000348:	f000 fbc0 	bl	8000acc <Error_Handler>
}
 800034c:	e022      	b.n	8000394 <motor3+0xc4>
	else if(dire==2)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b02      	cmp	r3, #2
 8000352:	d11f      	bne.n	8000394 <motor3+0xc4>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(0,0,100,0,9999));
 8000354:	f242 730f 	movw	r3, #9999	; 0x270f
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2300      	movs	r3, #0
 800035c:	2264      	movs	r2, #100	; 0x64
 800035e:	2100      	movs	r1, #0
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ff31 	bl	80001c8 <map>
 8000366:	4603      	mov	r3, r0
 8000368:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800036c:	330f      	adds	r3, #15
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <motor3+0xcc>)
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(0,0,100,0,9999));
 8000374:	f242 730f 	movw	r3, #9999	; 0x270f
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2300      	movs	r3, #0
 800037c:	2264      	movs	r2, #100	; 0x64
 800037e:	2100      	movs	r1, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff ff21 	bl	80001c8 <map>
 8000386:	4603      	mov	r3, r0
 8000388:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800038c:	330f      	adds	r3, #15
 800038e:	4a03      	ldr	r2, [pc, #12]	; (800039c <motor3+0xcc>)
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <motor2>:

void motor2(int dire,int duty)//第三モーター
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	if(dire==0){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d119      	bne.n	80003e4 <motor2+0x44>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(duty,0,100,0,9999));
 80003b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2300      	movs	r3, #0
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	2100      	movs	r1, #0
 80003bc:	6838      	ldr	r0, [r7, #0]
 80003be:	f7ff ff03 	bl	80001c8 <map>
 80003c2:	4603      	mov	r3, r0
 80003c4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80003c8:	330f      	adds	r3, #15
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <motor2+0xcc>)
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	6353      	str	r3, [r2, #52]	; 0x34
			   			    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80003d0:	2100      	movs	r1, #0
 80003d2:	4826      	ldr	r0, [pc, #152]	; (800046c <motor2+0xcc>)
 80003d4:	f002 fa1e 	bl	8002814 <HAL_TIM_PWM_Start>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d042      	beq.n	8000464 <motor2+0xc4>
			   			   			{
			   			   			 Error_Handler();
 80003de:	f000 fb75 	bl	8000acc <Error_Handler>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
	}


}
 80003e2:	e03f      	b.n	8000464 <motor2+0xc4>
	else if(dire==1){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d119      	bne.n	800041e <motor2+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(duty,0,100,0,9999));
 80003ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2300      	movs	r3, #0
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2100      	movs	r1, #0
 80003f6:	6838      	ldr	r0, [r7, #0]
 80003f8:	f7ff fee6 	bl	80001c8 <map>
 80003fc:	4603      	mov	r3, r0
 80003fe:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000402:	330f      	adds	r3, #15
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <motor2+0xcc>)
 8000406:	6812      	ldr	r2, [r2, #0]
 8000408:	6393      	str	r3, [r2, #56]	; 0x38
					   			    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800040a:	2104      	movs	r1, #4
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <motor2+0xcc>)
 800040e:	f002 fa01 	bl	8002814 <HAL_TIM_PWM_Start>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d025      	beq.n	8000464 <motor2+0xc4>
					   			   			 Error_Handler();
 8000418:	f000 fb58 	bl	8000acc <Error_Handler>
}
 800041c:	e022      	b.n	8000464 <motor2+0xc4>
	else if(dire==2)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d11f      	bne.n	8000464 <motor2+0xc4>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
 8000424:	f242 730f 	movw	r3, #9999	; 0x270f
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	2264      	movs	r2, #100	; 0x64
 800042e:	2100      	movs	r1, #0
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff fec9 	bl	80001c8 <map>
 8000436:	4603      	mov	r3, r0
 8000438:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800043c:	330f      	adds	r3, #15
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <motor2+0xcc>)
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
 8000444:	f242 730f 	movw	r3, #9999	; 0x270f
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2264      	movs	r2, #100	; 0x64
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff feb9 	bl	80001c8 <map>
 8000456:	4603      	mov	r3, r0
 8000458:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800045c:	330f      	adds	r3, #15
 800045e:	4a03      	ldr	r2, [pc, #12]	; (800046c <motor2+0xcc>)
 8000460:	6812      	ldr	r2, [r2, #0]
 8000462:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000068 	.word	0x20000068

08000470 <SW1.7861>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	inline int SW1()
	{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 ff3c 	bl	80012fc <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
	}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <main>:
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
int main(void)
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fc4f 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f919 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 fac1 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004a6:	f000 f96d 	bl	8000784 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004aa:	f000 fa3b 	bl	8000924 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  while (1)
  	  {

	  switch(SW1()){
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	469c      	mov	ip, r3
 80004b2:	f7ff ffdd 	bl	8000470 <SW1.7861>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <main+0x34>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d005      	beq.n	80004cc <main+0x3e>
 80004c0:	e009      	b.n	80004d6 <main+0x48>
	  case 0 : motor2(1,20);break;
 80004c2:	2114      	movs	r1, #20
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ff6b 	bl	80003a0 <motor2>
 80004ca:	e004      	b.n	80004d6 <main+0x48>
	  case 1 : motor2(2,0);break;
 80004cc:	2100      	movs	r1, #0
 80004ce:	2002      	movs	r0, #2
 80004d0:	f7ff ff66 	bl	80003a0 <motor2>
 80004d4:	bf00      	nop
	  }
	  switch(SW2()){
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	469c      	mov	ip, r3
 80004da:	f000 f88f 	bl	80005fc <SW2.7863>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <main+0x5c>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d005      	beq.n	80004f4 <main+0x66>
 80004e8:	e009      	b.n	80004fe <main+0x70>
	  case 0 : motor1(0,20);;break;
 80004ea:	2114      	movs	r1, #20
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe87 	bl	8000200 <motor1>
 80004f2:	e004      	b.n	80004fe <main+0x70>
	  case 1 : motor1(2,0);break;
 80004f4:	2100      	movs	r1, #0
 80004f6:	2002      	movs	r0, #2
 80004f8:	f7ff fe82 	bl	8000200 <motor1>
 80004fc:	bf00      	nop
	  }
	  switch(SW3()){
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	469c      	mov	ip, r3
 8000502:	f000 f88a 	bl	800061a <SW3.7865>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <main+0x84>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d005      	beq.n	800051c <main+0x8e>
 8000510:	e009      	b.n	8000526 <main+0x98>
	  case 0 : motor1(1,20);break;
 8000512:	2114      	movs	r1, #20
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff fe73 	bl	8000200 <motor1>
 800051a:	e004      	b.n	8000526 <main+0x98>
	  case 1 : motor1(2,0);break;
 800051c:	2100      	movs	r1, #0
 800051e:	2002      	movs	r0, #2
 8000520:	f7ff fe6e 	bl	8000200 <motor1>
 8000524:	bf00      	nop
	  }
	  switch(SW4()){
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	469c      	mov	ip, r3
 800052a:	f000 f885 	bl	8000638 <SW4.7867>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <main+0xac>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d005      	beq.n	8000544 <main+0xb6>
 8000538:	e009      	b.n	800054e <main+0xc0>
	  case 0 : motor1(1,20);break;
 800053a:	2114      	movs	r1, #20
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff fe5f 	bl	8000200 <motor1>
 8000542:	e004      	b.n	800054e <main+0xc0>
	  case 1 : motor1(2,0);break;
 8000544:	2100      	movs	r1, #0
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff fe5a 	bl	8000200 <motor1>
 800054c:	bf00      	nop
	  }
	  switch(SW5()){
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	469c      	mov	ip, r3
 8000552:	f000 f880 	bl	8000656 <SW5.7869>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <main+0xd4>
 800055c:	2b01      	cmp	r3, #1
 800055e:	d005      	beq.n	800056c <main+0xde>
 8000560:	e009      	b.n	8000576 <main+0xe8>
	  case 0 : motor1(1,20);break;
 8000562:	2114      	movs	r1, #20
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff fe4b 	bl	8000200 <motor1>
 800056a:	e004      	b.n	8000576 <main+0xe8>
	  case 1 : motor1(2,0);break;
 800056c:	2100      	movs	r1, #0
 800056e:	2002      	movs	r0, #2
 8000570:	f7ff fe46 	bl	8000200 <motor1>
 8000574:	bf00      	nop
	  }
	  switch(SW6()){
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	469c      	mov	ip, r3
 800057a:	f000 f87b 	bl	8000674 <SW6.7871>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <main+0xfc>
 8000584:	2b01      	cmp	r3, #1
 8000586:	d005      	beq.n	8000594 <main+0x106>
 8000588:	e009      	b.n	800059e <main+0x110>
	  case 0 : motor3(0,20);break;
 800058a:	2114      	movs	r1, #20
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fe9f 	bl	80002d0 <motor3>
 8000592:	e004      	b.n	800059e <main+0x110>
	  case 1 : motor3(2,0);break;
 8000594:	2100      	movs	r1, #0
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff fe9a 	bl	80002d0 <motor3>
 800059c:	bf00      	nop
	  }
	  switch(SW7()){
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	469c      	mov	ip, r3
 80005a2:	f000 f877 	bl	8000694 <SW7.7873>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <main+0x124>
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d005      	beq.n	80005bc <main+0x12e>
 80005b0:	e009      	b.n	80005c6 <main+0x138>
	  case 0 : motor2(0,20);break;
 80005b2:	2114      	movs	r1, #20
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fef3 	bl	80003a0 <motor2>
 80005ba:	e004      	b.n	80005c6 <main+0x138>
	  case 1 : motor2(2,0);break;
 80005bc:	2100      	movs	r1, #0
 80005be:	2002      	movs	r0, #2
 80005c0:	f7ff feee 	bl	80003a0 <motor2>
 80005c4:	bf00      	nop
	  }
	  switch(SW8()){
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	469c      	mov	ip, r3
 80005ca:	f000 f873 	bl	80006b4 <SW8.7875>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <main+0x14c>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d005      	beq.n	80005e4 <main+0x156>
 80005d8:	e009      	b.n	80005ee <main+0x160>
	  case 0 : motor3(1,20);break;
 80005da:	2114      	movs	r1, #20
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe77 	bl	80002d0 <motor3>
 80005e2:	e004      	b.n	80005ee <main+0x160>
	  case 1 : motor3(2,0);break;
 80005e4:	2100      	movs	r1, #0
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fe72 	bl	80002d0 <motor3>
 80005ec:	bf00      	nop
	  }
	  HAL_Delay(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f000 fc0a 	bl	8000e08 <HAL_Delay>
	 	  	  }
	 	  	   else{
	 	  		   motor2(2,0);
	 	  	   }
*/
	  HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 fc07 	bl	8000e08 <HAL_Delay>
	  switch(SW1()){
 80005fa:	e758      	b.n	80004ae <main+0x20>

080005fc <SW2.7863>:
	{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f000 fe76 	bl	80012fc <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
	}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <SW3.7865>:
	{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 8000624:	2108      	movs	r1, #8
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 fe67 	bl	80012fc <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
	}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <SW4.7867>:
	{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 fe58 	bl	80012fc <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
	}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <SW5.7869>:
	{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fe49 	bl	80012fc <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
	}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SW6.7871>:
	{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 800067e:	2101      	movs	r1, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SW6.7871+0x1c>)
 8000682:	f000 fe3b 	bl	80012fc <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
	}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	48000400 	.word	0x48000400

08000694 <SW7.7873>:
	{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f000 fe29 	bl	80012fc <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
	}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SW8.7875>:
	{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 80006be:	2102      	movs	r1, #2
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SW8.7875+0x1c>)
 80006c2:	f000 fe1b 	bl	80012fc <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
	}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000400 	.word	0x48000400

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006de:	2228      	movs	r2, #40	; 0x28
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 ffa2 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800071c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fe00 	bl	800132c <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000732:	f000 f9cb 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fcf3 	bl	800213c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800075c:	f000 f9b6 	bl	8000acc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fecb 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000778:	f000 f9a8 	bl	8000acc <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3758      	adds	r7, #88	; 0x58
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09a      	sub	sp, #104	; 0x68
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	222c      	movs	r2, #44	; 0x2c
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 ff34 	bl	800362c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c4:	4b55      	ldr	r3, [pc, #340]	; (800091c <MX_TIM1_Init+0x198>)
 80007c6:	4a56      	ldr	r2, [pc, #344]	; (8000920 <MX_TIM1_Init+0x19c>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <MX_TIM1_Init+0x198>)
 80007cc:	220f      	movs	r2, #15
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b52      	ldr	r3, [pc, #328]	; (800091c <MX_TIM1_Init+0x198>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <MX_TIM1_Init+0x198>)
 80007d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b4f      	ldr	r3, [pc, #316]	; (800091c <MX_TIM1_Init+0x198>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e4:	4b4d      	ldr	r3, [pc, #308]	; (800091c <MX_TIM1_Init+0x198>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_TIM1_Init+0x198>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f0:	484a      	ldr	r0, [pc, #296]	; (800091c <MX_TIM1_Init+0x198>)
 80007f2:	f001 ffaf 	bl	8002754 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f966 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800080a:	4619      	mov	r1, r3
 800080c:	4843      	ldr	r0, [pc, #268]	; (800091c <MX_TIM1_Init+0x198>)
 800080e:	f002 f96b 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000818:	f000 f958 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081c:	483f      	ldr	r0, [pc, #252]	; (800091c <MX_TIM1_Init+0x198>)
 800081e:	f001 ffc4 	bl	80027aa <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000828:	f000 f950 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800083c:	4619      	mov	r1, r3
 800083e:	4837      	ldr	r0, [pc, #220]	; (800091c <MX_TIM1_Init+0x198>)
 8000840:	f002 fdea 	bl	8003418 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800084a:	f000 f93f 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	2360      	movs	r3, #96	; 0x60
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <MX_TIM1_Init+0x198>)
 8000874:	f002 f820 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800087e:	f000 f925 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000886:	2204      	movs	r2, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4824      	ldr	r0, [pc, #144]	; (800091c <MX_TIM1_Init+0x198>)
 800088c:	f002 f814 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000896:	f000 f919 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800089a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089e:	2208      	movs	r2, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <MX_TIM1_Init+0x198>)
 80008a4:	f002 f808 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008ae:	f000 f90d 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b6:	220c      	movs	r2, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_TIM1_Init+0x198>)
 80008bc:	f001 fffc 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80008c6:	f000 f901 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <MX_TIM1_Init+0x198>)
 8000900:	f002 fdf8 	bl	80034f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800090a:	f000 f8df 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_TIM1_Init+0x198>)
 8000910:	f000 f93a 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 8000914:	bf00      	nop
 8000916:	3768      	adds	r7, #104	; 0x68
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000028 	.word	0x20000028
 8000920:	40012c00 	.word	0x40012c00

08000924 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000960:	220f      	movs	r2, #15
 8000962:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <MX_TIM2_Init+0x100>)
 800096c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000970:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_TIM2_Init+0x100>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800097e:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000980:	f001 fee8 	bl	8002754 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f89f 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000998:	4619      	mov	r1, r3
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <MX_TIM2_Init+0x100>)
 800099c:	f002 f8a4 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009a6:	f000 f891 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009aa:	481e      	ldr	r0, [pc, #120]	; (8000a24 <MX_TIM2_Init+0x100>)
 80009ac:	f001 fefd 	bl	80027aa <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009b6:	f000 f889 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4816      	ldr	r0, [pc, #88]	; (8000a24 <MX_TIM2_Init+0x100>)
 80009ca:	f002 fd25 	bl	8003418 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009d4:	f000 f87a 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2360      	movs	r3, #96	; 0x60
 80009da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_TIM2_Init+0x100>)
 80009f0:	f001 ff62 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009fa:	f000 f867 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000a06:	f001 ff57 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a10:	f000 f85c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <MX_TIM2_Init+0x100>)
 8000a16:	f000 f8b7 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 8000a1a:	bf00      	nop
 8000a1c:	3738      	adds	r7, #56	; 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000068 	.word	0x20000068

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a48:	6153      	str	r3, [r2, #20]
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0x9c>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8000a86:	f241 03f8 	movw	r3, #4344	; 0x10f8
 8000a8a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fabb 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_GPIO_Init+0xa0>)
 8000ab6:	f000 faaf 	bl	8001018 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <HAL_TIM_Base_MspInit+0x5c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10c      	bne.n	8000b50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4e:	e010      	b.n	8000b72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b58:	d10b      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	61d3      	str	r3, [r2, #28]
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <HAL_TIM_MspPostInit+0xd0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d130      	bne.n	8000c0c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bc2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f000 fa19 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f000 fa07 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c0a:	e021      	b.n	8000c50 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c14:	d11c      	bne.n	8000c50 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_TIM_MspPostInit+0xd4>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4c:	f000 f9e4 	bl	8001018 <HAL_GPIO_Init>
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40012c00 	.word	0x40012c00
 8000c5c:	40021000 	.word	0x40021000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f888 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <SystemInit+0x28>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <SystemInit+0x28>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SystemInit+0x28>)
 8000cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cee:	e003      	b.n	8000cf8 <LoopCopyDataInit>

08000cf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cf6:	3104      	adds	r1, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d00:	d3f6      	bcc.n	8000cf0 <CopyDataInit>
	ldr	r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d04:	e002      	b.n	8000d0c <LoopFillZerobss>

08000d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d08:	f842 3b04 	str.w	r3, [r2], #4

08000d0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <LoopForever+0x16>)
	cmp	r2, r3
 8000d0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d10:	d3f9      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d12:	f7ff ffd3 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f002 fc65 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1a:	f7ff fbb8 	bl	800048e <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d20:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000d24:	0800368c 	.word	0x0800368c
	ldr	r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d2c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d30:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d34:	200000ac 	.word	0x200000ac

08000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_2_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x28>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x28>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f92f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fec0 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f939 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f90f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000a8 	.word	0x200000a8

08000df0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000a8 	.word	0x200000a8

08000e08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_Delay+0x40>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e14e      	b.n	80012c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8140 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x38>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b12      	cmp	r3, #18
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d00b      	beq.n	80010ec <HAL_GPIO_Init+0xd4>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	2b11      	cmp	r3, #17
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 809a 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2d4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1d8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a44      	ldr	r2, [pc, #272]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011ec:	2305      	movs	r3, #5
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f aea9 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001332:	af00      	add	r7, sp, #0
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	f000 bef4 	b.w	800212e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 816a 	beq.w	800162a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001356:	4bb3      	ldr	r3, [pc, #716]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001362:	4bb0      	ldr	r3, [pc, #704]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d159      	bne.n	8001422 <HAL_RCC_OscConfig+0xf6>
 800136e:	4bad      	ldr	r3, [pc, #692]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137a:	d152      	bne.n	8001422 <HAL_RCC_OscConfig+0xf6>
 800137c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001380:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001390:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x82>
 80013a8:	4b9e      	ldr	r3, [pc, #632]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0xae>
 80013ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013d6:	4b93      	ldr	r3, [pc, #588]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f042 0220 	orr.w	r2, r2, #32
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f002 021f 	and.w	r2, r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 810c 	beq.w	8001628 <HAL_RCC_OscConfig+0x2fc>
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8106 	bne.w	8001628 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	f000 be86 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x110>
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e030      	b.n	800149e <HAL_RCC_OscConfig+0x172>
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x134>
 8001446:	4b77      	ldr	r3, [pc, #476]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a76      	ldr	r2, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b74      	ldr	r3, [pc, #464]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a73      	ldr	r2, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01e      	b.n	800149e <HAL_RCC_OscConfig+0x172>
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x15a>
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6c      	ldr	r2, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e00b      	b.n	800149e <HAL_RCC_OscConfig+0x172>
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800148c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a63      	ldr	r2, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	f023 020f 	bic.w	r2, r3, #15
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	495d      	ldr	r1, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d059      	beq.n	8001570 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc98 	bl	8000df0 <HAL_GetTick>
 80014c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff fc93 	bl	8000df0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d902      	bls.n	80014dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f000 be29 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x1e2>
 8001508:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x20e>
 800150e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001512:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001526:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800152a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001542:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001546:	fa92 f2a2 	rbit	r2, r2
 800154a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800154e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ab      	beq.n	80014c6 <HAL_RCC_OscConfig+0x19a>
 800156e:	e05c      	b.n	800162a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc3e 	bl	8000df0 <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fc39 	bl	8000df0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d902      	bls.n	8001590 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	f000 bdcf 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x296>
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e015      	b.n	80015ee <HAL_RCC_OscConfig+0x2c2>
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_RCC_OscConfig+0x2f8>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001602:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ab      	bne.n	800157a <HAL_RCC_OscConfig+0x24e>
 8001622:	e002      	b.n	800162a <HAL_RCC_OscConfig+0x2fe>
 8001624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 816f 	beq.w	8001918 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800163a:	4bd0      	ldr	r3, [pc, #832]	; (800197c <HAL_RCC_OscConfig+0x650>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001646:	4bcd      	ldr	r3, [pc, #820]	; (800197c <HAL_RCC_OscConfig+0x650>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d16c      	bne.n	800172c <HAL_RCC_OscConfig+0x400>
 8001652:	4bca      	ldr	r3, [pc, #808]	; (800197c <HAL_RCC_OscConfig+0x650>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d166      	bne.n	800172c <HAL_RCC_OscConfig+0x400>
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001670:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <HAL_RCC_OscConfig+0x362>
 8001688:	4bbc      	ldr	r3, [pc, #752]	; (800197c <HAL_RCC_OscConfig+0x650>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	e013      	b.n	80016b6 <HAL_RCC_OscConfig+0x38a>
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016b2:	4bb2      	ldr	r3, [pc, #712]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2202      	movs	r2, #2
 80016b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016c0:	fa92 f2a2 	rbit	r2, r2
 80016c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016cc:	fab2 f282 	clz	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f042 0220 	orr.w	r2, r2, #32
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3cc>
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f000 bd1b 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	21f8      	movs	r1, #248	; 0xf8
 8001708:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001710:	fa91 f1a1 	rbit	r1, r1
 8001714:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001718:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800171c:	fab1 f181 	clz	r1, r1
 8001720:	b2c9      	uxtb	r1, r1
 8001722:	408b      	lsls	r3, r1
 8001724:	4995      	ldr	r1, [pc, #596]	; (800197c <HAL_RCC_OscConfig+0x650>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e0f5      	b.n	8001918 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8085 	beq.w	8001842 <HAL_RCC_OscConfig+0x516>
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800174a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	2301      	movs	r3, #1
 8001762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb44 	bl	8000df0 <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fb3f 	bl	8000df0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d902      	bls.n	8001784 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	f000 bcd5 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001796:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x488>
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e013      	b.n	80017dc <HAL_RCC_OscConfig+0x4b0>
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2202      	movs	r2, #2
 80017de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017f2:	fab2 f282 	clz	r2, r2
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	f042 0220 	orr.w	r2, r2, #32
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f002 021f 	and.w	r2, r2, #31
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0af      	beq.n	800176e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_RCC_OscConfig+0x650>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	21f8      	movs	r1, #248	; 0xf8
 800181e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001826:	fa91 f1a1 	rbit	r1, r1
 800182a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800182e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001832:	fab1 f181 	clz	r1, r1
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	408b      	lsls	r3, r1
 800183a:	4950      	ldr	r1, [pc, #320]	; (800197c <HAL_RCC_OscConfig+0x650>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e06a      	b.n	8001918 <HAL_RCC_OscConfig+0x5ec>
 8001842:	2301      	movs	r3, #1
 8001844:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	461a      	mov	r2, r3
 800186a:	2300      	movs	r3, #0
 800186c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fabf 	bl	8000df0 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff faba 	bl	8000df0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d902      	bls.n	800188e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	f000 bc50 	b.w	800212e <HAL_RCC_OscConfig+0xe02>
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0x592>
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e013      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ba>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x650>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2202      	movs	r2, #2
 80018e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f0:	fa92 f2a2 	rbit	r2, r2
 80018f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018fc:	fab2 f282 	clz	r2, r2
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f002 021f 	and.w	r2, r2, #31
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1af      	bne.n	8001878 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80da 	beq.w	8001adc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d069      	beq.n	8001a06 <HAL_RCC_OscConfig+0x6da>
 8001932:	2301      	movs	r3, #1
 8001934:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x654>)
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	2301      	movs	r3, #1
 800195a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fa48 	bl	8000df0 <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff fa43 	bl	8000df0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d906      	bls.n	8001984 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e3d9      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	10908120 	.word	0x10908120
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001996:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019b2:	2202      	movs	r2, #2
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	4ba5      	ldr	r3, [pc, #660]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 80019c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019ce:	2102      	movs	r1, #2
 80019d0:	6019      	str	r1, [r3, #0]
 80019d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f1a3 	rbit	r1, r3
 80019dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019e0:	6019      	str	r1, [r3, #0]
  return result;
 80019e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0b0      	beq.n	8001966 <HAL_RCC_OscConfig+0x63a>
 8001a04:	e06a      	b.n	8001adc <HAL_RCC_OscConfig+0x7b0>
 8001a06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a1c:	601a      	str	r2, [r3, #0]
  return result;
 8001a1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <HAL_RCC_OscConfig+0x934>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9da 	bl	8000df0 <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff f9d5 	bl	8000df0 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e36b      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 8001a56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	6019      	str	r1, [r3, #0]
 8001aaa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f1a3 	rbit	r1, r3
 8001ab4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ab8:	6019      	str	r1, [r3, #0]
  return result;
 8001aba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1b2      	bne.n	8001a42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8158 	beq.w	8001d9c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <HAL_RCC_OscConfig+0x938>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11a      	bne.n	8001b66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <HAL_RCC_OscConfig+0x938>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x938>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f958 	bl	8000df0 <HAL_GetTick>
 8001b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7ff f953 	bl	8000df0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e2e9      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_OscConfig+0x938>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ef      	beq.n	8001b46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x852>
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a39      	ldr	r2, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e02f      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x876>
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e01d      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x89a>
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d06b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f902 	bl	8000df0 <HAL_GetTick>
 8001bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f8fd 	bl	8000df0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e291      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 8001c0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c0e:	2202      	movs	r2, #2
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c38:	601a      	str	r2, [r3, #0]
  return result;
 8001c3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_OscConfig+0x93c>
 8001c54:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <HAL_RCC_OscConfig+0x930>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x958>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	10908120 	.word	0x10908120
 8001c64:	40007000 	.word	0x40007000
 8001c68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4bbb      	ldr	r3, [pc, #748]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c88:	2102      	movs	r1, #2
 8001c8a:	6011      	str	r1, [r2, #0]
 8001c8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	fa92 f1a2 	rbit	r1, r2
 8001c96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c9a:	6011      	str	r1, [r2, #0]
  return result;
 8001c9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d099      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x8c6>
 8001cbe:	e063      	b.n	8001d88 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f896 	bl	8000df0 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff f891 	bl	8000df0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e225      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 8001ce2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d10:	601a      	str	r2, [r3, #0]
  return result;
 8001d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0xa06>
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	e00d      	b.n	8001d4e <HAL_RCC_OscConfig+0xa22>
 8001d32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d52:	2102      	movs	r1, #2
 8001d54:	6011      	str	r1, [r2, #0]
 8001d56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fa92 f1a2 	rbit	r1, r2
 8001d60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d64:	6011      	str	r1, [r2, #0]
  return result;
 8001d66:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f002 021f 	and.w	r2, r2, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1a0      	bne.n	8001cca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4a76      	ldr	r2, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 81c2 	beq.w	800212c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b71      	ldr	r3, [pc, #452]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f000 819c 	beq.w	80020ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 8114 	bne.w	8001fea <HAL_RCC_OscConfig+0xcbe>
 8001dc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dda:	601a      	str	r2, [r3, #0]
  return result;
 8001ddc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001de0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	461a      	mov	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7fe fffa 	bl	8000df0 <HAL_GetTick>
 8001dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7fe fff5 	bl	8000df0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e18b      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 8001e16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e2e:	601a      	str	r2, [r3, #0]
  return result;
 8001e30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_OscConfig+0xb24>
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e01b      	b.n	8001e88 <HAL_RCC_OscConfig+0xb5c>
 8001e50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e90:	6011      	str	r1, [r2, #0]
 8001e92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	fa92 f1a2 	rbit	r1, r2
 8001e9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d19e      	bne.n	8001e02 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	4925      	ldr	r1, [pc, #148]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ef8:	601a      	str	r2, [r3, #0]
  return result;
 8001efa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001efe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	461a      	mov	r2, r3
 8001f12:	2301      	movs	r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe ff6b 	bl	8000df0 <HAL_GetTick>
 8001f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ff66 	bl	8000df0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0fc      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 8001f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f4c:	601a      	str	r2, [r3, #0]
  return result;
 8001f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0xc48>
 8001f68:	4b01      	ldr	r3, [pc, #4]	; (8001f70 <HAL_RCC_OscConfig+0xc44>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	e01e      	b.n	8001fac <HAL_RCC_OscConfig+0xc80>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_OscConfig+0xe0c>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb4:	6011      	str	r1, [r2, #0]
 8001fb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	fa92 f1a2 	rbit	r1, r2
 8001fc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fc4:	6011      	str	r1, [r2, #0]
  return result;
 8001fc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d09b      	beq.n	8001f20 <HAL_RCC_OscConfig+0xbf4>
 8001fe8:	e0a0      	b.n	800212c <HAL_RCC_OscConfig+0xe00>
 8001fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002002:	601a      	str	r2, [r3, #0]
  return result;
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	461a      	mov	r2, r3
 800201c:	2300      	movs	r3, #0
 800201e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fee6 	bl	8000df0 <HAL_GetTick>
 8002024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e009      	b.n	800203e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fee1 	bl	8000df0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e077      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
 800203e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	601a      	str	r2, [r3, #0]
  return result;
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0xd4c>
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_OscConfig+0xe0c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0xd84>
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCC_OscConfig+0xe0c>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f107 0210 	add.w	r2, r7, #16
 80020b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020b8:	6011      	str	r1, [r2, #0]
 80020ba:	f107 0210 	add.w	r2, r7, #16
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	fa92 f1a2 	rbit	r1, r2
 80020c4:	f107 020c 	add.w	r2, r7, #12
 80020c8:	6011      	str	r1, [r2, #0]
  return result;
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d19e      	bne.n	800202a <HAL_RCC_OscConfig+0xcfe>
 80020ec:	e01e      	b.n	800212c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e018      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCC_OscConfig+0xe0c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002104:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	429a      	cmp	r2, r3
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002116:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b09e      	sub	sp, #120	; 0x78
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e162      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	498b      	ldr	r1, [pc, #556]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e14a      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	497f      	ldr	r1, [pc, #508]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80dc 	beq.w	8002368 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d13c      	bne.n	8002232 <HAL_RCC_ClockConfig+0xf6>
 80021b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xa6>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	e00f      	b.n	8002202 <HAL_RCC_ClockConfig+0xc6>
 80021e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
 80021f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f4:	663b      	str	r3, [r7, #96]	; 0x60
 80021f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002206:	65ba      	str	r2, [r7, #88]	; 0x58
 8002208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002212:	fab2 f282 	clz	r2, r2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f002 021f 	and.w	r2, r2, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d17b      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0f3      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d13c      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x178>
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_ClockConfig+0x128>
 800225e:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e00f      	b.n	8002284 <HAL_RCC_ClockConfig+0x148>
 8002264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002268:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
 8002272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002288:	63ba      	str	r2, [r7, #56]	; 0x38
 800228a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f002 021f 	and.w	r2, r2, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f202 	lsl.w	r2, r1, r2
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13a      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b2      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
 80022b4:	2302      	movs	r3, #2
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e00d      	b.n	80022f8 <HAL_RCC_ClockConfig+0x1bc>
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	61ba      	str	r2, [r7, #24]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	617a      	str	r2, [r7, #20]
  return result;
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	fab2 f282 	clz	r2, r2
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f042 0220 	orr.w	r2, r2, #32
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f002 021f 	and.w	r2, r2, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e079      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	491a      	ldr	r1, [pc, #104]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7fe fd5a 	bl	8000df0 <HAL_GetTick>
 800233c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe fd56 	bl	8000df0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e061      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d214      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4906      	ldr	r1, [pc, #24]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e040      	b.n	800241a <HAL_RCC_ClockConfig+0x2de>
 8002398:	40022000 	.word	0x40022000
 800239c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	491a      	ldr	r1, [pc, #104]	; (8002424 <HAL_RCC_ClockConfig+0x2e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_ClockConfig+0x2e8>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4912      	ldr	r1, [pc, #72]	; (8002424 <HAL_RCC_ClockConfig+0x2e8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023de:	f000 f829 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_RCC_ClockConfig+0x2e8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	22f0      	movs	r2, #240	; 0xf0
 80023ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	fa92 f2a2 	rbit	r2, r2
 80023f6:	60fa      	str	r2, [r7, #12]
  return result;
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	40d3      	lsrs	r3, r2
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x2ec>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	fa21 f303 	lsr.w	r3, r1, r3
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_RCC_ClockConfig+0x2f0>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_ClockConfig+0x2f4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fca8 	bl	8000d68 <HAL_InitTick>
  
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3778      	adds	r7, #120	; 0x78
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	08003654 	.word	0x08003654
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x30>
 800245e:	2b08      	cmp	r3, #8
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x36>
 8002462:	e03c      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	e03c      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002470:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002474:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	fa92 f2a2 	rbit	r2, r2
 800247c:	607a      	str	r2, [r7, #4]
  return result;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	40d3      	lsrs	r3, r2
 8002488:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	220f      	movs	r2, #15
 8002498:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	60fa      	str	r2, [r7, #12]
  return result;
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	40d3      	lsrs	r3, r2
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e004      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	623b      	str	r3, [r7, #32]
      break;
 80024dc:	e002      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e0:	623b      	str	r3, [r7, #32]
      break;
 80024e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	372c      	adds	r7, #44	; 0x2c
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08003664 	.word	0x08003664
 8002500:	08003674 	.word	0x08003674
 8002504:	003d0900 	.word	0x003d0900

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b092      	sub	sp, #72	; 0x48
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80d0 	beq.w	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252c:	4b86      	ldr	r3, [pc, #536]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10e      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a82      	ldr	r2, [pc, #520]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a79      	ldr	r2, [pc, #484]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fc3f 	bl	8000df0 <HAL_GetTick>
 8002572:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fc3b 	bl	8000df0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0db      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b70      	ldr	r3, [pc, #448]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800259e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d07d      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d076      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	461a      	mov	r2, r3
 80025dc:	2301      	movs	r3, #1
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	461a      	mov	r2, r3
 8002600:	2300      	movs	r3, #0
 8002602:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002604:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002608:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800260a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d045      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fbec 	bl	8000df0 <HAL_GetTick>
 8002618:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe fbe8 	bl	8000df0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e086      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002632:	2302      	movs	r3, #2
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	2302      	movs	r3, #2
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
  return result;
 800264a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d102      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	e007      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2202      	movs	r2, #2
 8002678:	613a      	str	r2, [r7, #16]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	60fa      	str	r2, [r7, #12]
  return result;
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0bd      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026a0:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4926      	ldr	r1, [pc, #152]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	491a      	ldr	r1, [pc, #104]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f023 0210 	bic.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4912      	ldr	r1, [pc, #72]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	490b      	ldr	r1, [pc, #44]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800271c:	4313      	orrs	r3, r2
 800271e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800273a:	4313      	orrs	r3, r2
 800273c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3748      	adds	r7, #72	; 0x48
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	10908100 	.word	0x10908100

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e01d      	b.n	80027a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f9d2 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 fa62 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e01d      	b.n	80027f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f815 	bl	8002800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f000 fa37 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fdd0 	bl	80033cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_TIM_PWM_Start+0x90>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00e      	beq.n	8002854 <HAL_TIM_PWM_Start+0x40>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_TIM_PWM_Start+0x94>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_TIM_PWM_Start+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_TIM_PWM_Start+0x98>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_TIM_PWM_Start+0x40>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_TIM_PWM_Start+0x9c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_TIM_PWM_Start+0x44>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_TIM_PWM_Start+0x46>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_TIM_PWM_Start+0xa0>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b06      	cmp	r3, #6
 800287e:	d00b      	beq.n	8002898 <HAL_TIM_PWM_Start+0x84>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d007      	beq.n	8002898 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	00010007 	.word	0x00010007

080028b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e105      	b.n	8002ade <HAL_TIM_PWM_ConfigChannel+0x226>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b14      	cmp	r3, #20
 80028e6:	f200 80f0 	bhi.w	8002aca <HAL_TIM_PWM_ConfigChannel+0x212>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002945 	.word	0x08002945
 80028f4:	08002acb 	.word	0x08002acb
 80028f8:	08002acb 	.word	0x08002acb
 80028fc:	08002acb 	.word	0x08002acb
 8002900:	08002985 	.word	0x08002985
 8002904:	08002acb 	.word	0x08002acb
 8002908:	08002acb 	.word	0x08002acb
 800290c:	08002acb 	.word	0x08002acb
 8002910:	080029c7 	.word	0x080029c7
 8002914:	08002acb 	.word	0x08002acb
 8002918:	08002acb 	.word	0x08002acb
 800291c:	08002acb 	.word	0x08002acb
 8002920:	08002a07 	.word	0x08002a07
 8002924:	08002acb 	.word	0x08002acb
 8002928:	08002acb 	.word	0x08002acb
 800292c:	08002acb 	.word	0x08002acb
 8002930:	08002a49 	.word	0x08002a49
 8002934:	08002acb 	.word	0x08002acb
 8002938:	08002acb 	.word	0x08002acb
 800293c:	08002acb 	.word	0x08002acb
 8002940:	08002a89 	.word	0x08002a89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f9fe 	bl	8002d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0208 	orr.w	r2, r2, #8
 800295e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6999      	ldr	r1, [r3, #24]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	619a      	str	r2, [r3, #24]
      break;
 8002982:	e0a3      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fa64 	bl	8002e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6999      	ldr	r1, [r3, #24]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	619a      	str	r2, [r3, #24]
      break;
 80029c4:	e082      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fac3 	bl	8002f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0208 	orr.w	r2, r2, #8
 80029e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69d9      	ldr	r1, [r3, #28]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
      break;
 8002a04:	e062      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fb21 	bl	8003054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	61da      	str	r2, [r3, #28]
      break;
 8002a46:	e041      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb64 	bl	800311c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0208 	orr.w	r2, r2, #8
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a86:	e021      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fba2 	bl	80031d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021a      	lsls	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ac8:	e000      	b.n	8002acc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002aca:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop

08002ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIM_ConfigClockSource+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0a8      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d067      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x124>
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d80b      	bhi.n	8002b58 <HAL_TIM_ConfigClockSource+0x70>
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d073      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x144>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d802      	bhi.n	8002b4e <HAL_TIM_ConfigClockSource+0x66>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d06f      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b4c:	e078      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d06c      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x144>
 8002b52:	2b30      	cmp	r3, #48	; 0x30
 8002b54:	d06a      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002b56:	e073      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d00d      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0x90>
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d804      	bhi.n	8002b6a <HAL_TIM_ConfigClockSource+0x82>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d033      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0xe4>
 8002b64:	2b60      	cmp	r3, #96	; 0x60
 8002b66:	d041      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002b68:	e06a      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d066      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d017      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002b76:	e063      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fc00 	bl	800338c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e04c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f000 fbe9 	bl	800338c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc8:	609a      	str	r2, [r3, #8]
      break;
 8002bca:	e039      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f000 fb5d 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2150      	movs	r1, #80	; 0x50
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fbb6 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8002bea:	e029      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f000 fb7c 	bl	80032f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2160      	movs	r1, #96	; 0x60
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fba6 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8002c0a:	e019      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f000 fb3d 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fb96 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8002c2a:	e009      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fb8d 	bl	8003356 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e000      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <TIM_Base_SetConfig+0xdc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x28>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x28>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <TIM_Base_SetConfig+0xe0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <TIM_Base_SetConfig+0xdc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <TIM_Base_SetConfig+0x6a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d00f      	beq.n	8002cc6 <TIM_Base_SetConfig+0x6a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <TIM_Base_SetConfig+0xe0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00b      	beq.n	8002cc6 <TIM_Base_SetConfig+0x6a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <TIM_Base_SetConfig+0xe4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <TIM_Base_SetConfig+0x6a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <TIM_Base_SetConfig+0xe8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <TIM_Base_SetConfig+0x6a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <TIM_Base_SetConfig+0xec>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <TIM_Base_SetConfig+0xdc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <TIM_Base_SetConfig+0xc0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <TIM_Base_SetConfig+0xe4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_Base_SetConfig+0xc0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <TIM_Base_SetConfig+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0xc0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <TIM_Base_SetConfig+0xec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <TIM_OC1_SetConfig+0xfc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <TIM_OC1_SetConfig+0x78>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <TIM_OC1_SetConfig+0x100>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_OC1_SetConfig+0x78>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <TIM_OC1_SetConfig+0x104>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_OC1_SetConfig+0x78>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <TIM_OC1_SetConfig+0x108>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10c      	bne.n	8002dde <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0308 	bic.w	r3, r3, #8
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <TIM_OC1_SetConfig+0xfc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_OC1_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <TIM_OC1_SetConfig+0x100>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_OC1_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <TIM_OC1_SetConfig+0x104>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_OC1_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <TIM_OC1_SetConfig+0x108>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d111      	bne.n	8002e22 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0210 	bic.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0320 	bic.w	r3, r3, #32
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <TIM_OC2_SetConfig+0xf0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10d      	bne.n	8002ed8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <TIM_OC2_SetConfig+0xf0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xa0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <TIM_OC2_SetConfig+0xf4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xa0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <TIM_OC2_SetConfig+0xf8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xa0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <TIM_OC2_SetConfig+0xfc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f06:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800

08002f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <TIM_OC3_SetConfig+0xec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10d      	bne.n	8002fd6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <TIM_OC3_SetConfig+0xec>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_OC3_SetConfig+0x9e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <TIM_OC3_SetConfig+0xf0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_OC3_SetConfig+0x9e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <TIM_OC3_SetConfig+0xf4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_OC3_SetConfig+0x9e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TIM_OC3_SetConfig+0xf8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d113      	bne.n	800301e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	621a      	str	r2, [r3, #32]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400
 8003050:	40014800 	.word	0x40014800

08003054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	031b      	lsls	r3, r3, #12
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <TIM_OC4_SetConfig+0xb8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <TIM_OC4_SetConfig+0x7c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <TIM_OC4_SetConfig+0xbc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_OC4_SetConfig+0x7c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a14      	ldr	r2, [pc, #80]	; (8003114 <TIM_OC4_SetConfig+0xc0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_OC4_SetConfig+0x7c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <TIM_OC4_SetConfig+0xc4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d109      	bne.n	80030e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40014000 	.word	0x40014000
 8003114:	40014400 	.word	0x40014400
 8003118:	40014800 	.word	0x40014800

0800311c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <TIM_OC5_SetConfig+0xac>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_OC5_SetConfig+0x72>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <TIM_OC5_SetConfig+0xb0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_OC5_SetConfig+0x72>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <TIM_OC5_SetConfig+0xb4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_OC5_SetConfig+0x72>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <TIM_OC5_SetConfig+0xb8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d109      	bne.n	80031a2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800

080031d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	051b      	lsls	r3, r3, #20
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <TIM_OC6_SetConfig+0xb0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_OC6_SetConfig+0x74>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <TIM_OC6_SetConfig+0xb4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_OC6_SetConfig+0x74>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a14      	ldr	r2, [pc, #80]	; (8003290 <TIM_OC6_SetConfig+0xb8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_OC6_SetConfig+0x74>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <TIM_OC6_SetConfig+0xbc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d109      	bne.n	8003260 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	029b      	lsls	r3, r3, #10
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40014000 	.word	0x40014000
 8003290:	40014400 	.word	0x40014400
 8003294:	40014800 	.word	0x40014800

08003298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0201 	bic.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 030a 	bic.w	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0210 	bic.w	r2, r3, #16
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	031b      	lsls	r3, r3, #12
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	f043 0307 	orr.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800342c:	2302      	movs	r3, #2
 800342e:	e054      	b.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003460:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d009      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40014000 	.word	0x40014000

080034f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800350c:	2302      	movs	r3, #2
 800350e:	e060      	b.n	80035d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d115      	bne.n	80035c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	051b      	lsls	r3, r3, #20
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0d      	ldr	r6, [pc, #52]	; (800361c <__libc_init_array+0x38>)
 80035e8:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ea:	1ba4      	subs	r4, r4, r6
 80035ec:	10a4      	asrs	r4, r4, #2
 80035ee:	2500      	movs	r5, #0
 80035f0:	42a5      	cmp	r5, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	4e0b      	ldr	r6, [pc, #44]	; (8003624 <__libc_init_array+0x40>)
 80035f6:	4c0c      	ldr	r4, [pc, #48]	; (8003628 <__libc_init_array+0x44>)
 80035f8:	f000 f820 	bl	800363c <_init>
 80035fc:	1ba4      	subs	r4, r4, r6
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	2500      	movs	r5, #0
 8003602:	42a5      	cmp	r5, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800360c:	4798      	blx	r3
 800360e:	3501      	adds	r5, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003616:	4798      	blx	r3
 8003618:	3501      	adds	r5, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08003684 	.word	0x08003684
 8003620:	08003684 	.word	0x08003684
 8003624:	08003684 	.word	0x08003684
 8003628:	08003688 	.word	0x08003688

0800362c <memset>:
 800362c:	4402      	add	r2, r0
 800362e:	4603      	mov	r3, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <_init>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	bf00      	nop
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr

08003648 <_fini>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr
