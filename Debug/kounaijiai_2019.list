
kounaijiai_2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080035c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080035c0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ed7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001565  00000000  00000000  00028f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002a478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001677a  00000000  00000000  0002b700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007381  00000000  00000000  00041e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008234e  00000000  00000000  000491fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000cb5c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003564 	.word	0x08003564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003564 	.word	0x08003564

080001c8 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


long map(long x, long in_min, long in_max, long out_min, long out_max)//値の�?囲の変換関数
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	69b9      	ldr	r1, [r7, #24]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1a8a      	subs	r2, r1, r2
 80001e2:	fb02 f203 	mul.w	r2, r2, r3
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	1acb      	subs	r3, r1, r3
 80001ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	4413      	add	r3, r2
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <motor1>:

void motor1(int dire,int duty)//右モーター
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	if(dire==0){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d119      	bne.n	8000244 <motor1+0x44>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(duty,0,100,0,9999));
 8000210:	f242 730f 	movw	r3, #9999	; 0x270f
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2264      	movs	r2, #100	; 0x64
 800021a:	2100      	movs	r1, #0
 800021c:	6838      	ldr	r0, [r7, #0]
 800021e:	f7ff ffd3 	bl	80001c8 <map>
 8000222:	4603      	mov	r3, r0
 8000224:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000228:	330f      	adds	r3, #15
 800022a:	4a28      	ldr	r2, [pc, #160]	; (80002cc <motor1+0xcc>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	6353      	str	r3, [r2, #52]	; 0x34
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000230:	2100      	movs	r1, #0
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <motor1+0xcc>)
 8000234:	f002 fa82 	bl	800273c <HAL_TIM_PWM_Start>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d042      	beq.n	80002c4 <motor1+0xc4>
				   					{
				   						Error_Handler();
 800023e:	f000 fbd9 	bl	80009f4 <Error_Handler>
			{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
			}

}
 8000242:	e03f      	b.n	80002c4 <motor1+0xc4>
	else if (dire==1){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d119      	bne.n	800027e <motor1+0x7e>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(duty,0,100,0,9999));
 800024a:	f242 730f 	movw	r3, #9999	; 0x270f
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2300      	movs	r3, #0
 8000252:	2264      	movs	r2, #100	; 0x64
 8000254:	2100      	movs	r1, #0
 8000256:	6838      	ldr	r0, [r7, #0]
 8000258:	f7ff ffb6 	bl	80001c8 <map>
 800025c:	4603      	mov	r3, r0
 800025e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000262:	330f      	adds	r3, #15
 8000264:	4a19      	ldr	r2, [pc, #100]	; (80002cc <motor1+0xcc>)
 8000266:	6812      	ldr	r2, [r2, #0]
 8000268:	6393      	str	r3, [r2, #56]	; 0x38
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800026a:	2104      	movs	r1, #4
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <motor1+0xcc>)
 800026e:	f002 fa65 	bl	800273c <HAL_TIM_PWM_Start>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d025      	beq.n	80002c4 <motor1+0xc4>
			   							Error_Handler();
 8000278:	f000 fbbc 	bl	80009f4 <Error_Handler>
}
 800027c:	e022      	b.n	80002c4 <motor1+0xc4>
	else if(dire==2)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	d11f      	bne.n	80002c4 <motor1+0xc4>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
 8000284:	f242 730f 	movw	r3, #9999	; 0x270f
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2264      	movs	r2, #100	; 0x64
 800028e:	2100      	movs	r1, #0
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ff99 	bl	80001c8 <map>
 8000296:	4603      	mov	r3, r0
 8000298:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800029c:	330f      	adds	r3, #15
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <motor1+0xcc>)
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
 80002a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	2264      	movs	r2, #100	; 0x64
 80002ae:	2100      	movs	r1, #0
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ff89 	bl	80001c8 <map>
 80002b6:	4603      	mov	r3, r0
 80002b8:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80002bc:	330f      	adds	r3, #15
 80002be:	4a03      	ldr	r2, [pc, #12]	; (80002cc <motor1+0xcc>)
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000028 	.word	0x20000028

080002d0 <motor3>:

void motor3(int dire,int duty)//左モーター
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	if(dire==0){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d119      	bne.n	8000314 <motor3+0x44>

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(duty,0,100,0,9999));
 80002e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2300      	movs	r3, #0
 80002e8:	2264      	movs	r2, #100	; 0x64
 80002ea:	2100      	movs	r1, #0
 80002ec:	6838      	ldr	r0, [r7, #0]
 80002ee:	f7ff ff6b 	bl	80001c8 <map>
 80002f2:	4603      	mov	r3, r0
 80002f4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80002f8:	330f      	adds	r3, #15
 80002fa:	4a28      	ldr	r2, [pc, #160]	; (800039c <motor3+0xcc>)
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	63d3      	str	r3, [r2, #60]	; 0x3c
				   	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000300:	2108      	movs	r1, #8
 8000302:	4826      	ldr	r0, [pc, #152]	; (800039c <motor3+0xcc>)
 8000304:	f002 fa1a 	bl	800273c <HAL_TIM_PWM_Start>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d042      	beq.n	8000394 <motor3+0xc4>
				   					{
				   						Error_Handler();
 800030e:	f000 fb71 	bl	80009f4 <Error_Handler>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(0,0,100,0,9999));
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(0,0,100,0,9999));
		}


}
 8000312:	e03f      	b.n	8000394 <motor3+0xc4>
	else if(dire==1){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d119      	bne.n	800034e <motor3+0x7e>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(duty,0,100,0,9999));
 800031a:	f242 730f 	movw	r3, #9999	; 0x270f
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2264      	movs	r2, #100	; 0x64
 8000324:	2100      	movs	r1, #0
 8000326:	6838      	ldr	r0, [r7, #0]
 8000328:	f7ff ff4e 	bl	80001c8 <map>
 800032c:	4603      	mov	r3, r0
 800032e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000332:	330f      	adds	r3, #15
 8000334:	4a19      	ldr	r2, [pc, #100]	; (800039c <motor3+0xcc>)
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	6413      	str	r3, [r2, #64]	; 0x40
				   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800033a:	210c      	movs	r1, #12
 800033c:	4817      	ldr	r0, [pc, #92]	; (800039c <motor3+0xcc>)
 800033e:	f002 f9fd 	bl	800273c <HAL_TIM_PWM_Start>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d025      	beq.n	8000394 <motor3+0xc4>
				   							Error_Handler();
 8000348:	f000 fb54 	bl	80009f4 <Error_Handler>
}
 800034c:	e022      	b.n	8000394 <motor3+0xc4>
	else if(dire==2)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b02      	cmp	r3, #2
 8000352:	d11f      	bne.n	8000394 <motor3+0xc4>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,9999-map(0,0,100,0,9999));
 8000354:	f242 730f 	movw	r3, #9999	; 0x270f
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2300      	movs	r3, #0
 800035c:	2264      	movs	r2, #100	; 0x64
 800035e:	2100      	movs	r1, #0
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ff31 	bl	80001c8 <map>
 8000366:	4603      	mov	r3, r0
 8000368:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800036c:	330f      	adds	r3, #15
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <motor3+0xcc>)
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	63d3      	str	r3, [r2, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,9999-map(0,0,100,0,9999));
 8000374:	f242 730f 	movw	r3, #9999	; 0x270f
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2300      	movs	r3, #0
 800037c:	2264      	movs	r2, #100	; 0x64
 800037e:	2100      	movs	r1, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f7ff ff21 	bl	80001c8 <map>
 8000386:	4603      	mov	r3, r0
 8000388:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800038c:	330f      	adds	r3, #15
 800038e:	4a03      	ldr	r2, [pc, #12]	; (800039c <motor3+0xcc>)
 8000390:	6812      	ldr	r2, [r2, #0]
 8000392:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <motor2>:

void motor2(int dire,int duty)//第三モーター
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	if(dire==0){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d119      	bne.n	80003e4 <motor2+0x44>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(duty,0,100,0,9999));
 80003b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2300      	movs	r3, #0
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	2100      	movs	r1, #0
 80003bc:	6838      	ldr	r0, [r7, #0]
 80003be:	f7ff ff03 	bl	80001c8 <map>
 80003c2:	4603      	mov	r3, r0
 80003c4:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80003c8:	330f      	adds	r3, #15
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <motor2+0xcc>)
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	6353      	str	r3, [r2, #52]	; 0x34
			   			    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80003d0:	2100      	movs	r1, #0
 80003d2:	4826      	ldr	r0, [pc, #152]	; (800046c <motor2+0xcc>)
 80003d4:	f002 f9b2 	bl	800273c <HAL_TIM_PWM_Start>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d042      	beq.n	8000464 <motor2+0xc4>
			   			   			{
			   			   			 Error_Handler();
 80003de:	f000 fb09 	bl	80009f4 <Error_Handler>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
	}


}
 80003e2:	e03f      	b.n	8000464 <motor2+0xc4>
	else if(dire==1){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d119      	bne.n	800041e <motor2+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(duty,0,100,0,9999));
 80003ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2300      	movs	r3, #0
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2100      	movs	r1, #0
 80003f6:	6838      	ldr	r0, [r7, #0]
 80003f8:	f7ff fee6 	bl	80001c8 <map>
 80003fc:	4603      	mov	r3, r0
 80003fe:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000402:	330f      	adds	r3, #15
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <motor2+0xcc>)
 8000406:	6812      	ldr	r2, [r2, #0]
 8000408:	6393      	str	r3, [r2, #56]	; 0x38
					   			    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800040a:	2104      	movs	r1, #4
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <motor2+0xcc>)
 800040e:	f002 f995 	bl	800273c <HAL_TIM_PWM_Start>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d025      	beq.n	8000464 <motor2+0xc4>
					   			   			 Error_Handler();
 8000418:	f000 faec 	bl	80009f4 <Error_Handler>
}
 800041c:	e022      	b.n	8000464 <motor2+0xc4>
	else if(dire==2)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d11f      	bne.n	8000464 <motor2+0xc4>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,9999-map(0,0,100,0,9999));
 8000424:	f242 730f 	movw	r3, #9999	; 0x270f
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	2264      	movs	r2, #100	; 0x64
 800042e:	2100      	movs	r1, #0
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff fec9 	bl	80001c8 <map>
 8000436:	4603      	mov	r3, r0
 8000438:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800043c:	330f      	adds	r3, #15
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <motor2+0xcc>)
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,9999-map(0,0,100,0,9999));
 8000444:	f242 730f 	movw	r3, #9999	; 0x270f
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2264      	movs	r2, #100	; 0x64
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f7ff feb9 	bl	80001c8 <map>
 8000456:	4603      	mov	r3, r0
 8000458:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800045c:	330f      	adds	r3, #15
 800045e:	4a03      	ldr	r2, [pc, #12]	; (800046c <motor2+0xcc>)
 8000460:	6812      	ldr	r2, [r2, #0]
 8000462:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000068 	.word	0x20000068

08000470 <SW1.7861>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	inline int SW1()
	{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fed0 	bl	8001224 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
	}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <main>:
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
int main(void)
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fbe3 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f8ad 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 fa55 	bl	8000950 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004a6:	f000 f901 	bl	80006ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80004aa:	f000 f9cf 	bl	800084c <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 //motor1の挙動 ?��?右
	 	  if(SW4()==0)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	469c      	mov	ip, r3
 80004b2:	f000 f863 	bl	800057c <SW4.7867>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d104      	bne.n	80004c6 <main+0x38>
	 	  	  {
	 	  		  //printf("sw4\n");
	 	  		 motor1(1,20);
 80004bc:	2114      	movs	r1, #20
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff fe9e 	bl	8000200 <motor1>
 80004c4:	e00f      	b.n	80004e6 <main+0x58>
	 	  	  }
	 	  	  else if(SW2()==0)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	469c      	mov	ip, r3
 80004ca:	f000 f848 	bl	800055e <SW2.7863>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d104      	bne.n	80004de <main+0x50>
	 	  	 	  {
	 	  	 		//  printf("sw2\n");
	 	  	 		  motor1(0,20);
 80004d4:	2114      	movs	r1, #20
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff fe92 	bl	8000200 <motor1>
 80004dc:	e003      	b.n	80004e6 <main+0x58>
	 	  	 	  }
	 	  	  else
	 	  	  {
	 	  		  motor1(2,0);
 80004de:	2100      	movs	r1, #0
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff fe8d 	bl	8000200 <motor1>
	 	  	  }


	 	  	//motor3挙動 左
	 	  	   if(SW8()==0)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	469c      	mov	ip, r3
 80004ea:	f000 f877 	bl	80005dc <SW8.7875>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d104      	bne.n	80004fe <main+0x70>
	 	  	  {

	 	  		  motor3(1,20);
 80004f4:	2114      	movs	r1, #20
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff feea 	bl	80002d0 <motor3>
 80004fc:	e00f      	b.n	800051e <main+0x90>
	 	  	  }

	 	  	   else if(SW6()==0)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	469c      	mov	ip, r3
 8000502:	f000 f84b 	bl	800059c <SW6.7871>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d104      	bne.n	8000516 <main+0x88>
	 	  	 	  {
	 	  	 		  motor3(0,20);
 800050c:	2114      	movs	r1, #20
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fede 	bl	80002d0 <motor3>
 8000514:	e003      	b.n	800051e <main+0x90>
	 	  	 	  }
	 	  	   else{
	 	  		   motor3(2,0);
 8000516:	2100      	movs	r1, #0
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff fed9 	bl	80002d0 <motor3>
	 	  	   }

	 	  	//motor2挙動 a-m
	 	  	   if(SW1()==0)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	469c      	mov	ip, r3
 8000522:	f7ff ffa5 	bl	8000470 <SW1.7861>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d104      	bne.n	8000536 <main+0xa8>
	 	  	  {
	 	  		motor2(1,20);
 800052c:	2114      	movs	r1, #20
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff36 	bl	80003a0 <motor2>
 8000534:	e00f      	b.n	8000556 <main+0xc8>
	 	  	  }

	 	  	   else if(SW7()==0)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	469c      	mov	ip, r3
 800053a:	f000 f83f 	bl	80005bc <SW7.7873>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d104      	bne.n	800054e <main+0xc0>
	 	  	  {
	 	  		  motor2(0,20);
 8000544:	2114      	movs	r1, #20
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ff2a 	bl	80003a0 <motor2>
 800054c:	e003      	b.n	8000556 <main+0xc8>
	 	  	  }
	 	  	   else{
	 	  		   motor2(2,0);
 800054e:	2100      	movs	r1, #0
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff ff25 	bl	80003a0 <motor2>
	 	  	   }

	 	  HAL_Delay(10);
 8000556:	200a      	movs	r0, #10
 8000558:	f000 fbea 	bl	8000d30 <HAL_Delay>
	 	  if(SW4()==0)
 800055c:	e7a7      	b.n	80004ae <main+0x20>

0800055e <SW2.7863>:
	{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8000568:	2120      	movs	r1, #32
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f000 fe59 	bl	8001224 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
	}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <SW4.7867>:
	{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 8000586:	2110      	movs	r1, #16
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f000 fe4a 	bl	8001224 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
	}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SW6.7871>:
	{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 80005a6:	2101      	movs	r1, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <SW6.7871+0x1c>)
 80005aa:	f000 fe3b 	bl	8001224 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
	}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	48000400 	.word	0x48000400

080005bc <SW7.7873>:
	{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 fe29 	bl	8001224 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
	}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <SW8.7875>:
	{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	f8c7 c004 	str.w	ip, [r7, #4]
	return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 80005e6:	2102      	movs	r1, #2
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <SW8.7875+0x1c>)
 80005ea:	f000 fe1b 	bl	8001224 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
	}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48000400 	.word	0x48000400

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 ffa2 	bl	8003554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000648:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fe00 	bl	8001254 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800065a:	f000 f9cb 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fcf3 	bl	8002064 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000684:	f000 f9b6 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fecb 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006a0:	f000 f9a8 	bl	80009f4 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3758      	adds	r7, #88	; 0x58
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	222c      	movs	r2, #44	; 0x2c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 ff34 	bl	8003554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b55      	ldr	r3, [pc, #340]	; (8000844 <MX_TIM1_Init+0x198>)
 80006ee:	4a56      	ldr	r2, [pc, #344]	; (8000848 <MX_TIM1_Init+0x19c>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80006f2:	4b54      	ldr	r3, [pc, #336]	; (8000844 <MX_TIM1_Init+0x198>)
 80006f4:	220f      	movs	r2, #15
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <MX_TIM1_Init+0x198>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MX_TIM1_Init+0x198>)
 8000700:	f242 720f 	movw	r2, #9999	; 0x270f
 8000704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_TIM1_Init+0x198>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <MX_TIM1_Init+0x198>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_TIM1_Init+0x198>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000718:	484a      	ldr	r0, [pc, #296]	; (8000844 <MX_TIM1_Init+0x198>)
 800071a:	f001 ffaf 	bl	800267c <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f966 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000732:	4619      	mov	r1, r3
 8000734:	4843      	ldr	r0, [pc, #268]	; (8000844 <MX_TIM1_Init+0x198>)
 8000736:	f002 f96b 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000740:	f000 f958 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000744:	483f      	ldr	r0, [pc, #252]	; (8000844 <MX_TIM1_Init+0x198>)
 8000746:	f001 ffc4 	bl	80026d2 <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000750:	f000 f950 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000760:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000764:	4619      	mov	r1, r3
 8000766:	4837      	ldr	r0, [pc, #220]	; (8000844 <MX_TIM1_Init+0x198>)
 8000768:	f002 fdea 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000772:	f000 f93f 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	482a      	ldr	r0, [pc, #168]	; (8000844 <MX_TIM1_Init+0x198>)
 800079c:	f002 f820 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007a6:	f000 f925 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4824      	ldr	r0, [pc, #144]	; (8000844 <MX_TIM1_Init+0x198>)
 80007b4:	f002 f814 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007be:	f000 f919 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c6:	2208      	movs	r2, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <MX_TIM1_Init+0x198>)
 80007cc:	f002 f808 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007d6:	f000 f90d 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	220c      	movs	r2, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <MX_TIM1_Init+0x198>)
 80007e4:	f001 fffc 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80007ee:	f000 f901 	bl	80009f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM1_Init+0x198>)
 8000828:	f002 fdf8 	bl	800341c <HAL_TIMEx_ConfigBreakDeadTime>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000832:	f000 f8df 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM1_Init+0x198>)
 8000838:	f000 f93a 	bl	8000ab0 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3768      	adds	r7, #104	; 0x68
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000028 	.word	0x20000028
 8000848:	40012c00 	.word	0x40012c00

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_TIM2_Init+0x100>)
 8000880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_TIM2_Init+0x100>)
 8000888:	220f      	movs	r2, #15
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <MX_TIM2_Init+0x100>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_TIM2_Init+0x100>)
 8000894:	f242 720f 	movw	r2, #9999	; 0x270f
 8000898:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <MX_TIM2_Init+0x100>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_TIM2_Init+0x100>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a6:	4829      	ldr	r0, [pc, #164]	; (800094c <MX_TIM2_Init+0x100>)
 80008a8:	f001 fee8 	bl	800267c <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f89f 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_TIM2_Init+0x100>)
 80008c4:	f002 f8a4 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008ce:	f000 f891 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d2:	481e      	ldr	r0, [pc, #120]	; (800094c <MX_TIM2_Init+0x100>)
 80008d4:	f001 fefd 	bl	80026d2 <HAL_TIM_PWM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 f889 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <MX_TIM2_Init+0x100>)
 80008f2:	f002 fd25 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008fc:	f000 f87a 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000900:	2360      	movs	r3, #96	; 0x60
 8000902:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM2_Init+0x100>)
 8000918:	f001 ff62 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000922:	f000 f867 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	2204      	movs	r2, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM2_Init+0x100>)
 800092e:	f001 ff57 	bl	80027e0 <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000938:	f000 f85c 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM2_Init+0x100>)
 800093e:	f000 f8b7 	bl	8000ab0 <HAL_TIM_MspPostInit>

}
 8000942:	bf00      	nop
 8000944:	3738      	adds	r7, #56	; 0x38
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000068 	.word	0x20000068

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a20      	ldr	r2, [pc, #128]	; (80009ec <MX_GPIO_Init+0x9c>)
 800096c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_GPIO_Init+0x9c>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <MX_GPIO_Init+0x9c>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_GPIO_Init+0x9c>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80009ae:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80009b2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fabb 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ca:	2303      	movs	r3, #3
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xa0>)
 80009de:	f000 faaf 	bl	8000f40 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <HAL_TIM_Base_MspInit+0x5c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10c      	bne.n	8000a78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a76:	e010      	b.n	8000a9a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d10b      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_TIM_Base_MspInit+0x60>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40012c00 	.word	0x40012c00
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2c      	ldr	r2, [pc, #176]	; (8000b80 <HAL_TIM_MspPostInit+0xd0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d130      	bne.n	8000b34 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a2b      	ldr	r2, [pc, #172]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000aea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000afc:	2306      	movs	r3, #6
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 fa19 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000b20:	230b      	movs	r3, #11
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f000 fa07 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b32:	e021      	b.n	8000b78 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b3c:	d11c      	bne.n	8000b78 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_TIM_MspPostInit+0xd4>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b56:	2303      	movs	r3, #3
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b66:	2301      	movs	r3, #1
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 f9e4 	bl	8000f40 <HAL_GPIO_Init>
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f888 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <SystemInit+0x28>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <SystemInit+0x28>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SystemInit+0x28>)
 8000bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c16:	e003      	b.n	8000c20 <LoopCopyDataInit>

08000c18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c1e:	3104      	adds	r1, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c28:	d3f6      	bcc.n	8000c18 <CopyDataInit>
	ldr	r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c2c:	e002      	b.n	8000c34 <LoopFillZerobss>

08000c2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c30:	f842 3b04 	str.w	r3, [r2], #4

08000c34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LoopForever+0x16>)
	cmp	r2, r3
 8000c36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c38:	d3f9      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffd3 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fc65 	bl	800350c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fc24 	bl	800048e <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000c4c:	080035b4 	.word	0x080035b4
	ldr	r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c54:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c5c:	200000ac 	.word	0x200000ac

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f92f 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fec0 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f939 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f90f 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200000a8 	.word	0x200000a8

08000d18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200000a8 	.word	0x200000a8

08000d30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_Delay+0x40>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff47 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5c 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e14e      	b.n	80011ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8140 	beq.w	80011e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x38>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d00b      	beq.n	8001014 <HAL_GPIO_Init+0xd4>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001008:	2b11      	cmp	r3, #17
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b12      	cmp	r3, #18
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 0201 	and.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 809a 	beq.w	80011e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_GPIO_Init+0x2cc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a54      	ldr	r2, [pc, #336]	; (800120c <HAL_GPIO_Init+0x2cc>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_GPIO_Init+0x2cc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x2d0>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f6:	d013      	beq.n	8001120 <HAL_GPIO_Init+0x1e0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_GPIO_Init+0x2d4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <HAL_GPIO_Init+0x2d8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1d8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_GPIO_Init+0x2dc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1d4>
 8001110:	2303      	movs	r3, #3
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 8001114:	2305      	movs	r3, #5
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 8001118:	2302      	movs	r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 8001120:	2300      	movs	r3, #0
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001132:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2d0>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f aea9 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	48000c00 	.word	0x48000c00
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800125a:	af00      	add	r7, sp, #0
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	f000 bef4 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 816a 	beq.w	8001552 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800127e:	4bb3      	ldr	r3, [pc, #716]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128a:	4bb0      	ldr	r3, [pc, #704]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b08      	cmp	r3, #8
 8001294:	d159      	bne.n	800134a <HAL_RCC_OscConfig+0xf6>
 8001296:	4bad      	ldr	r3, [pc, #692]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d152      	bne.n	800134a <HAL_RCC_OscConfig+0xf6>
 80012a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x82>
 80012d0:	4b9e      	ldr	r3, [pc, #632]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0xae>
 80012d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012fe:	4b93      	ldr	r3, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001306:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800130a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800130e:	fa92 f2a2 	rbit	r2, r2
 8001312:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001316:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800131a:	fab2 f282 	clz	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f042 0220 	orr.w	r2, r2, #32
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	f002 021f 	and.w	r2, r2, #31
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 810c 	beq.w	8001550 <HAL_RCC_OscConfig+0x2fc>
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 8106 	bne.w	8001550 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	f000 be86 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x110>
 8001356:	4b7d      	ldr	r3, [pc, #500]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7c      	ldr	r2, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e030      	b.n	80013c6 <HAL_RCC_OscConfig+0x172>
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x134>
 800136e:	4b77      	ldr	r3, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a76      	ldr	r2, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b74      	ldr	r3, [pc, #464]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a73      	ldr	r2, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e01e      	b.n	80013c6 <HAL_RCC_OscConfig+0x172>
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x15a>
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6c      	ldr	r2, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x172>
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a66      	ldr	r2, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	f023 020f 	bic.w	r2, r3, #15
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	495d      	ldr	r1, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d059      	beq.n	8001498 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc98 	bl	8000d18 <HAL_GetTick>
 80013e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fc93 	bl	8000d18 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d902      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	f000 be29 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
 8001404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001408:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001418:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x1e2>
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x20e>
 8001436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800144a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001452:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001466:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800146a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800146e:	fa92 f2a2 	rbit	r2, r2
 8001472:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001476:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ab      	beq.n	80013ee <HAL_RCC_OscConfig+0x19a>
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc3e 	bl	8000d18 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a2:	f7ff fc39 	bl	8000d18 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d902      	bls.n	80014b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f000 bdcf 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d102      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x2c2>
 80014ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001506:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x2f8>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800151e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001522:	fa92 f2a2 	rbit	r2, r2
 8001526:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800152a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	f002 021f 	and.w	r2, r2, #31
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ab      	bne.n	80014a2 <HAL_RCC_OscConfig+0x24e>
 800154a:	e002      	b.n	8001552 <HAL_RCC_OscConfig+0x2fe>
 800154c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 816f 	beq.w	8001840 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001562:	4bd0      	ldr	r3, [pc, #832]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800156e:	4bcd      	ldr	r3, [pc, #820]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d16c      	bne.n	8001654 <HAL_RCC_OscConfig+0x400>
 800157a:	4bca      	ldr	r3, [pc, #808]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d166      	bne.n	8001654 <HAL_RCC_OscConfig+0x400>
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001598:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x362>
 80015b0:	4bbc      	ldr	r3, [pc, #752]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e013      	b.n	80015de <HAL_RCC_OscConfig+0x38a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015da:	4bb2      	ldr	r3, [pc, #712]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2202      	movs	r2, #2
 80015e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_RCC_OscConfig+0x3cc>
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d002      	beq.n	8001620 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f000 bd1b 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4ba0      	ldr	r3, [pc, #640]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	21f8      	movs	r1, #248	; 0xf8
 8001630:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001638:	fa91 f1a1 	rbit	r1, r1
 800163c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001640:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001644:	fab1 f181 	clz	r1, r1
 8001648:	b2c9      	uxtb	r1, r1
 800164a:	408b      	lsls	r3, r1
 800164c:	4995      	ldr	r1, [pc, #596]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e0f5      	b.n	8001840 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8085 	beq.w	800176a <HAL_RCC_OscConfig+0x516>
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001672:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	461a      	mov	r2, r3
 8001688:	2301      	movs	r3, #1
 800168a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb44 	bl	8000d18 <HAL_GetTick>
 8001690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fb3f 	bl	8000d18 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d902      	bls.n	80016ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f000 bcd5 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0x488>
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	e013      	b.n	8001704 <HAL_RCC_OscConfig+0x4b0>
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2202      	movs	r2, #2
 8001706:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800170a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800170e:	fa92 f2a2 	rbit	r2, r2
 8001712:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001716:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0af      	beq.n	8001696 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	21f8      	movs	r1, #248	; 0xf8
 8001746:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800174e:	fa91 f1a1 	rbit	r1, r1
 8001752:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001756:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800175a:	fab1 f181 	clz	r1, r1
 800175e:	b2c9      	uxtb	r1, r1
 8001760:	408b      	lsls	r3, r1
 8001762:	4950      	ldr	r1, [pc, #320]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e06a      	b.n	8001840 <HAL_RCC_OscConfig+0x5ec>
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800177c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800178a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	461a      	mov	r2, r3
 8001792:	2300      	movs	r3, #0
 8001794:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fabf 	bl	8000d18 <HAL_GetTick>
 800179a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff faba 	bl	8000d18 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d902      	bls.n	80017b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f000 bc50 	b.w	8002056 <HAL_RCC_OscConfig+0xe02>
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x592>
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e013      	b.n	800180e <HAL_RCC_OscConfig+0x5ba>
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x650>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2202      	movs	r2, #2
 8001810:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001814:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001818:	fa92 f2a2 	rbit	r2, r2
 800181c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001820:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001824:	fab2 f282 	clz	r2, r2
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f042 0220 	orr.w	r2, r2, #32
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1af      	bne.n	80017a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80da 	beq.w	8001a04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d069      	beq.n	800192e <HAL_RCC_OscConfig+0x6da>
 800185a:	2301      	movs	r3, #1
 800185c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800186c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x654>)
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	2301      	movs	r3, #1
 8001882:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fa48 	bl	8000d18 <HAL_GetTick>
 8001888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188c:	e00e      	b.n	80018ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fa43 	bl	8000d18 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d906      	bls.n	80018ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e3d9      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	10908120 	.word	0x10908120
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018c2:	2202      	movs	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018da:	2202      	movs	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 80018f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018f6:	2102      	movs	r1, #2
 80018f8:	6019      	str	r1, [r3, #0]
 80018fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f1a3 	rbit	r1, r3
 8001904:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001908:	6019      	str	r1, [r3, #0]
  return result;
 800190a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0b0      	beq.n	800188e <HAL_RCC_OscConfig+0x63a>
 800192c:	e06a      	b.n	8001a04 <HAL_RCC_OscConfig+0x7b0>
 800192e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800194a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	2300      	movs	r3, #0
 800195e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff f9da 	bl	8000d18 <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff f9d5 	bl	8000d18 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e36b      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 800197e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001982:	2202      	movs	r2, #2
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019b2:	2202      	movs	r2, #2
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 80019c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019ce:	2102      	movs	r1, #2
 80019d0:	6019      	str	r1, [r3, #0]
 80019d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f1a3 	rbit	r1, r3
 80019dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019e0:	6019      	str	r1, [r3, #0]
  return result;
 80019e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1b2      	bne.n	800196a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8158 	beq.w	8001cc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x938>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d11a      	bne.n	8001a8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <HAL_RCC_OscConfig+0x938>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_RCC_OscConfig+0x938>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a64:	f7ff f958 	bl	8000d18 <HAL_GetTick>
 8001a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f953 	bl	8000d18 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e2e9      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <HAL_RCC_OscConfig+0x938>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ef      	beq.n	8001a6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x852>
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a39      	ldr	r2, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e02f      	b.n	8001b06 <HAL_RCC_OscConfig+0x8b2>
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x876>
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e01d      	b.n	8001b06 <HAL_RCC_OscConfig+0x8b2>
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0x89a>
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x8b2>
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d06b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff f902 	bl	8000d18 <HAL_GetTick>
 8001b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	e00b      	b.n	8001b32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff f8fd 	bl	8000d18 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e291      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 8001b32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b60:	601a      	str	r2, [r3, #0]
  return result;
 8001b62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d109      	bne.n	8001b90 <HAL_RCC_OscConfig+0x93c>
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <HAL_RCC_OscConfig+0x930>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x958>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	10908120 	.word	0x10908120
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b94:	2202      	movs	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4bbb      	ldr	r3, [pc, #748]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	6011      	str	r1, [r2, #0]
 8001bb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fa92 f1a2 	rbit	r1, r2
 8001bbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bc2:	6011      	str	r1, [r2, #0]
  return result;
 8001bc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d099      	beq.n	8001b1a <HAL_RCC_OscConfig+0x8c6>
 8001be6:	e063      	b.n	8001cb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f896 	bl	8000d18 <HAL_GetTick>
 8001bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f891 	bl	8000d18 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e225      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 8001c0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c0e:	2202      	movs	r2, #2
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c38:	601a      	str	r2, [r3, #0]
  return result;
 8001c3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0xa06>
 8001c54:	4b90      	ldr	r3, [pc, #576]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	e00d      	b.n	8001c76 <HAL_RCC_OscConfig+0xa22>
 8001c5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	6011      	str	r1, [r2, #0]
 8001c7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	fa92 f1a2 	rbit	r1, r2
 8001c88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c8c:	6011      	str	r1, [r2, #0]
  return result;
 8001c8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1a0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb8:	4b77      	ldr	r3, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4a76      	ldr	r2, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 81c2 	beq.w	8002054 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd0:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	f000 819c 	beq.w	8002016 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	f040 8114 	bne.w	8001f12 <HAL_RCC_OscConfig+0xcbe>
 8001cea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d02:	601a      	str	r2, [r3, #0]
  return result;
 8001d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fffa 	bl	8000d18 <HAL_GetTick>
 8001d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe fff5 	bl	8000d18 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e18b      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 8001d3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0xb24>
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb5c>
 8001d78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dc8:	6011      	str	r1, [r2, #0]
  return result;
 8001dca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d19e      	bne.n	8001d2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	4925      	ldr	r1, [pc, #148]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e20:	601a      	str	r2, [r3, #0]
  return result;
 8001e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff6b 	bl	8000d18 <HAL_GetTick>
 8001e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e46:	e009      	b.n	8001e5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ff66 	bl	8000d18 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0fc      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 8001e5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e74:	601a      	str	r2, [r3, #0]
  return result;
 8001e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0xc48>
 8001e90:	4b01      	ldr	r3, [pc, #4]	; (8001e98 <HAL_RCC_OscConfig+0xc44>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e01e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xc80>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_OscConfig+0xe0c>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fa92 f1a2 	rbit	r1, r2
 8001ee8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001eec:	6011      	str	r1, [r2, #0]
  return result;
 8001eee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d09b      	beq.n	8001e48 <HAL_RCC_OscConfig+0xbf4>
 8001f10:	e0a0      	b.n	8002054 <HAL_RCC_OscConfig+0xe00>
 8001f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2a:	601a      	str	r2, [r3, #0]
  return result;
 8001f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fee6 	bl	8000d18 <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	e009      	b.n	8001f66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fee1 	bl	8000d18 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e077      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xd4c>
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_OscConfig+0xe0c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd84>
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f107 0320 	add.w	r3, r7, #32
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0xe0c>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f107 0210 	add.w	r2, r7, #16
 8001fdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe0:	6011      	str	r1, [r2, #0]
 8001fe2:	f107 0210 	add.w	r2, r7, #16
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fa92 f1a2 	rbit	r1, r2
 8001fec:	f107 020c 	add.w	r2, r7, #12
 8001ff0:	6011      	str	r1, [r2, #0]
  return result;
 8001ff2:	f107 020c 	add.w	r2, r7, #12
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d19e      	bne.n	8001f52 <HAL_RCC_OscConfig+0xcfe>
 8002014:	e01e      	b.n	8002054 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e018      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCC_OscConfig+0xe0c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800202c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	429a      	cmp	r2, r3
 800203c:	d108      	bne.n	8002050 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800203e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09e      	sub	sp, #120	; 0x78
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e162      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b90      	ldr	r3, [pc, #576]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	498b      	ldr	r1, [pc, #556]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e14a      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	497f      	ldr	r1, [pc, #508]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80dc 	beq.w	8002290 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d13c      	bne.n	800215a <HAL_RCC_ClockConfig+0xf6>
 80020e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_RCC_ClockConfig+0xa6>
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e00f      	b.n	800212a <HAL_RCC_ClockConfig+0xc6>
 800210a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	667b      	str	r3, [r7, #100]	; 0x64
 8002118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211c:	663b      	str	r3, [r7, #96]	; 0x60
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800212e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800213a:	fab2 f282 	clz	r2, r2
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f002 021f 	and.w	r2, r2, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d17b      	bne.n	800224e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0f3      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d13c      	bne.n	80021dc <HAL_RCC_ClockConfig+0x178>
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_ClockConfig+0x128>
 8002186:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e00f      	b.n	80021ac <HAL_RCC_ClockConfig+0x148>
 800218c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	647b      	str	r3, [r7, #68]	; 0x44
 800219a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
 80021a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a8:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d13a      	bne.n	800224e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b2      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
 80021dc:	2302      	movs	r3, #2
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1a0>
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	e00d      	b.n	8002220 <HAL_RCC_ClockConfig+0x1bc>
 8002204:	2302      	movs	r3, #2
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2202      	movs	r2, #2
 8002222:	61ba      	str	r2, [r7, #24]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	fa92 f2a2 	rbit	r2, r2
 800222a:	617a      	str	r2, [r7, #20]
  return result;
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	fab2 f282 	clz	r2, r2
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f042 0220 	orr.w	r2, r2, #32
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f002 021f 	and.w	r2, r2, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e079      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	491a      	ldr	r1, [pc, #104]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7fe fd5a 	bl	8000d18 <HAL_GetTick>
 8002264:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7fe fd56 	bl	8000d18 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e061      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_ClockConfig+0x260>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d214      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4906      	ldr	r1, [pc, #24]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e040      	b.n	8002342 <HAL_RCC_ClockConfig+0x2de>
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_ClockConfig+0x2e8>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	491a      	ldr	r1, [pc, #104]	; (800234c <HAL_RCC_ClockConfig+0x2e8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x2e8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x2e8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002306:	f000 f829 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800230a:	4601      	mov	r1, r0
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_RCC_ClockConfig+0x2e8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002314:	22f0      	movs	r2, #240	; 0xf0
 8002316:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	fa92 f2a2 	rbit	r2, r2
 800231e:	60fa      	str	r2, [r7, #12]
  return result;
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	fab2 f282 	clz	r2, r2
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	40d3      	lsrs	r3, r2
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x2ec>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	fa21 f303 	lsr.w	r3, r1, r3
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_RCC_ClockConfig+0x2f0>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_RCC_ClockConfig+0x2f4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fca8 	bl	8000c90 <HAL_InitTick>
  
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3778      	adds	r7, #120	; 0x78
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	0800357c 	.word	0x0800357c
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b08b      	sub	sp, #44	; 0x2c
 8002360:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x36>
 800238a:	e03c      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_GetSysClockFreq+0xc4>)
 800238e:	623b      	str	r3, [r7, #32]
      break;
 8002390:	e03c      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002398:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800239c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	fa92 f2a2 	rbit	r2, r2
 80023a4:	607a      	str	r2, [r7, #4]
  return result;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	40d3      	lsrs	r3, r2
 80023b0:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	220f      	movs	r2, #15
 80023c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	fa92 f2a2 	rbit	r2, r2
 80023c8:	60fa      	str	r2, [r7, #12]
  return result;
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	40d3      	lsrs	r3, r2
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e004      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	623b      	str	r3, [r7, #32]
      break;
 8002404:	e002      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002408:	623b      	str	r3, [r7, #32]
      break;
 800240a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240c:	6a3b      	ldr	r3, [r7, #32]
}
 800240e:	4618      	mov	r0, r3
 8002410:	372c      	adds	r7, #44	; 0x2c
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	0800358c 	.word	0x0800358c
 8002428:	0800359c 	.word	0x0800359c
 800242c:	003d0900 	.word	0x003d0900

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b092      	sub	sp, #72	; 0x48
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80d0 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002454:	4b86      	ldr	r3, [pc, #536]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10e      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b83      	ldr	r3, [pc, #524]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	4a82      	ldr	r2, [pc, #520]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	61d3      	str	r3, [r2, #28]
 800246c:	4b80      	ldr	r3, [pc, #512]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b7d      	ldr	r3, [pc, #500]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a79      	ldr	r2, [pc, #484]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe fc3f 	bl	8000d18 <HAL_GetTick>
 800249a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe fc3b 	bl	8000d18 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0db      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024bc:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d07d      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d076      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	461a      	mov	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d045      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fbec 	bl	8000d18 <HAL_GetTick>
 8002540:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe fbe8 	bl	8000d18 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e086      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800255a:	2302      	movs	r3, #2
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	61fb      	str	r3, [r7, #28]
  return result;
 8002572:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d102      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	e007      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b35      	ldr	r3, [pc, #212]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2202      	movs	r2, #2
 80025a0:	613a      	str	r2, [r7, #16]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	60fa      	str	r2, [r7, #12]
  return result;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0bd      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4926      	ldr	r1, [pc, #152]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f023 0210 	bic.w	r2, r3, #16
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002644:	4313      	orrs	r3, r2
 8002646:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3748      	adds	r7, #72	; 0x48
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	10908100 	.word	0x10908100

0800267c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e01d      	b.n	80026ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe f9d2 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fa62 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e01d      	b.n	8002720 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f815 	bl	8002728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f000 fa37 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fdd0 	bl	80032f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_TIM_PWM_Start+0x90>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00e      	beq.n	800277c <HAL_TIM_PWM_Start+0x40>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_TIM_PWM_Start+0x94>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_TIM_PWM_Start+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_TIM_PWM_Start+0x98>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_TIM_PWM_Start+0x40>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_TIM_PWM_Start+0x9c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_TIM_PWM_Start+0x44>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_TIM_PWM_Start+0x46>
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_TIM_PWM_Start+0xa0>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d00b      	beq.n	80027c0 <HAL_TIM_PWM_Start+0x84>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d007      	beq.n	80027c0 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800
 80027dc:	00010007 	.word	0x00010007

080027e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e105      	b.n	8002a06 <HAL_TIM_PWM_ConfigChannel+0x226>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b14      	cmp	r3, #20
 800280e:	f200 80f0 	bhi.w	80029f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	0800286d 	.word	0x0800286d
 800281c:	080029f3 	.word	0x080029f3
 8002820:	080029f3 	.word	0x080029f3
 8002824:	080029f3 	.word	0x080029f3
 8002828:	080028ad 	.word	0x080028ad
 800282c:	080029f3 	.word	0x080029f3
 8002830:	080029f3 	.word	0x080029f3
 8002834:	080029f3 	.word	0x080029f3
 8002838:	080028ef 	.word	0x080028ef
 800283c:	080029f3 	.word	0x080029f3
 8002840:	080029f3 	.word	0x080029f3
 8002844:	080029f3 	.word	0x080029f3
 8002848:	0800292f 	.word	0x0800292f
 800284c:	080029f3 	.word	0x080029f3
 8002850:	080029f3 	.word	0x080029f3
 8002854:	080029f3 	.word	0x080029f3
 8002858:	08002971 	.word	0x08002971
 800285c:	080029f3 	.word	0x080029f3
 8002860:	080029f3 	.word	0x080029f3
 8002864:	080029f3 	.word	0x080029f3
 8002868:	080029b1 	.word	0x080029b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f9fe 	bl	8002c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0208 	orr.w	r2, r2, #8
 8002886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6999      	ldr	r1, [r3, #24]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	619a      	str	r2, [r3, #24]
      break;
 80028aa:	e0a3      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa64 	bl	8002d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6999      	ldr	r1, [r3, #24]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	021a      	lsls	r2, r3, #8
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	619a      	str	r2, [r3, #24]
      break;
 80028ec:	e082      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fac3 	bl	8002e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0208 	orr.w	r2, r2, #8
 8002908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0204 	bic.w	r2, r2, #4
 8002918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69d9      	ldr	r1, [r3, #28]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	61da      	str	r2, [r3, #28]
      break;
 800292c:	e062      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fb21 	bl	8002f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69d9      	ldr	r1, [r3, #28]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	61da      	str	r2, [r3, #28]
      break;
 800296e:	e041      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fb64 	bl	8003044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0208 	orr.w	r2, r2, #8
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029ae:	e021      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fba2 	bl	8003100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029f0:	e000      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80029f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop

08002a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_TIM_ConfigClockSource+0x18>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e0a8      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d067      	beq.n	8002b34 <HAL_TIM_ConfigClockSource+0x124>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d80b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x70>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d073      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x144>
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d802      	bhi.n	8002a76 <HAL_TIM_ConfigClockSource+0x66>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d06f      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a74:	e078      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d06c      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x144>
 8002a7a:	2b30      	cmp	r3, #48	; 0x30
 8002a7c:	d06a      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002a7e:	e073      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a80:	2b70      	cmp	r3, #112	; 0x70
 8002a82:	d00d      	beq.n	8002aa0 <HAL_TIM_ConfigClockSource+0x90>
 8002a84:	2b70      	cmp	r3, #112	; 0x70
 8002a86:	d804      	bhi.n	8002a92 <HAL_TIM_ConfigClockSource+0x82>
 8002a88:	2b50      	cmp	r3, #80	; 0x50
 8002a8a:	d033      	beq.n	8002af4 <HAL_TIM_ConfigClockSource+0xe4>
 8002a8c:	2b60      	cmp	r3, #96	; 0x60
 8002a8e:	d041      	beq.n	8002b14 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002a90:	e06a      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d066      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0x156>
 8002a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9c:	d017      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002a9e:	e063      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f000 fc00 	bl	80032b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]
      break;
 8002acc:	e04c      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f000 fbe9 	bl	80032b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af0:	609a      	str	r2, [r3, #8]
      break;
 8002af2:	e039      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f000 fb5d 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2150      	movs	r1, #80	; 0x50
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fbb6 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002b12:	e029      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f000 fb7c 	bl	800321e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2160      	movs	r1, #96	; 0x60
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fba6 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002b32:	e019      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f000 fb3d 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fb96 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002b52:	e009      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f000 fb8d 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002b64:	e000      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a32      	ldr	r2, [pc, #200]	; (8002c60 <TIM_Base_SetConfig+0xdc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0x28>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0x28>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <TIM_Base_SetConfig+0xe0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <TIM_Base_SetConfig+0xdc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <TIM_Base_SetConfig+0x6a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bcc:	d00f      	beq.n	8002bee <TIM_Base_SetConfig+0x6a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a24      	ldr	r2, [pc, #144]	; (8002c64 <TIM_Base_SetConfig+0xe0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_Base_SetConfig+0x6a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <TIM_Base_SetConfig+0xe4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0x6a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <TIM_Base_SetConfig+0xe8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0x6a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <TIM_Base_SetConfig+0xec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <TIM_Base_SetConfig+0xdc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0xc0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <TIM_Base_SetConfig+0xe4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0xc0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <TIM_Base_SetConfig+0xe8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0xc0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <TIM_Base_SetConfig+0xec>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	615a      	str	r2, [r3, #20]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f023 0302 	bic.w	r3, r3, #2
 8002cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <TIM_OC1_SetConfig+0xfc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <TIM_OC1_SetConfig+0x78>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <TIM_OC1_SetConfig+0x100>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <TIM_OC1_SetConfig+0x78>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <TIM_OC1_SetConfig+0x104>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_OC1_SetConfig+0x78>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_OC1_SetConfig+0x108>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10c      	bne.n	8002d06 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0308 	bic.w	r3, r3, #8
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <TIM_OC1_SetConfig+0xfc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_OC1_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <TIM_OC1_SetConfig+0x100>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <TIM_OC1_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <TIM_OC1_SetConfig+0x104>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_OC1_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <TIM_OC1_SetConfig+0x108>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0210 	bic.w	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0320 	bic.w	r3, r3, #32
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <TIM_OC2_SetConfig+0xf0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10d      	bne.n	8002e00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <TIM_OC2_SetConfig+0xf0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <TIM_OC2_SetConfig+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <TIM_OC2_SetConfig+0xf4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <TIM_OC2_SetConfig+0xa0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <TIM_OC2_SetConfig+0xf8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_OC2_SetConfig+0xa0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <TIM_OC2_SetConfig+0xfc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d113      	bne.n	8002e48 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e2e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800

08002e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <TIM_OC3_SetConfig+0xec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10d      	bne.n	8002efe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <TIM_OC3_SetConfig+0xec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_OC3_SetConfig+0x9e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <TIM_OC3_SetConfig+0xf0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_OC3_SetConfig+0x9e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <TIM_OC3_SetConfig+0xf4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_OC3_SetConfig+0x9e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <TIM_OC3_SetConfig+0xf8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d113      	bne.n	8002f46 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800

08002f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <TIM_OC4_SetConfig+0xb8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x7c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <TIM_OC4_SetConfig+0xbc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x7c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <TIM_OC4_SetConfig+0xc0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_OC4_SetConfig+0x7c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <TIM_OC4_SetConfig+0xc4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800

08003044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <TIM_OC5_SetConfig+0xac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_OC5_SetConfig+0x72>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <TIM_OC5_SetConfig+0xb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_OC5_SetConfig+0x72>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <TIM_OC5_SetConfig+0xb4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_OC5_SetConfig+0x72>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a12      	ldr	r2, [pc, #72]	; (80030fc <TIM_OC5_SetConfig+0xb8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d109      	bne.n	80030ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800

08003100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	051b      	lsls	r3, r3, #20
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <TIM_OC6_SetConfig+0xb0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_OC6_SetConfig+0x74>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <TIM_OC6_SetConfig+0xb4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_OC6_SetConfig+0x74>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <TIM_OC6_SetConfig+0xb8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_OC6_SetConfig+0x74>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <TIM_OC6_SetConfig+0xbc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d109      	bne.n	8003188 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	029b      	lsls	r3, r3, #10
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0210 	bic.w	r2, r3, #16
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800325a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	f043 0307 	orr.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2201      	movs	r2, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1a      	ldr	r2, [r3, #32]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e054      	b.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003388:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d009      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10c      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40014000 	.word	0x40014000

0800341c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003434:	2302      	movs	r3, #2
 8003436:	e060      	b.n	80034fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a14      	ldr	r2, [pc, #80]	; (8003508 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d115      	bne.n	80034e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	051b      	lsls	r3, r3, #20
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00

0800350c <__libc_init_array>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4e0d      	ldr	r6, [pc, #52]	; (8003544 <__libc_init_array+0x38>)
 8003510:	4c0d      	ldr	r4, [pc, #52]	; (8003548 <__libc_init_array+0x3c>)
 8003512:	1ba4      	subs	r4, r4, r6
 8003514:	10a4      	asrs	r4, r4, #2
 8003516:	2500      	movs	r5, #0
 8003518:	42a5      	cmp	r5, r4
 800351a:	d109      	bne.n	8003530 <__libc_init_array+0x24>
 800351c:	4e0b      	ldr	r6, [pc, #44]	; (800354c <__libc_init_array+0x40>)
 800351e:	4c0c      	ldr	r4, [pc, #48]	; (8003550 <__libc_init_array+0x44>)
 8003520:	f000 f820 	bl	8003564 <_init>
 8003524:	1ba4      	subs	r4, r4, r6
 8003526:	10a4      	asrs	r4, r4, #2
 8003528:	2500      	movs	r5, #0
 800352a:	42a5      	cmp	r5, r4
 800352c:	d105      	bne.n	800353a <__libc_init_array+0x2e>
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003534:	4798      	blx	r3
 8003536:	3501      	adds	r5, #1
 8003538:	e7ee      	b.n	8003518 <__libc_init_array+0xc>
 800353a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353e:	4798      	blx	r3
 8003540:	3501      	adds	r5, #1
 8003542:	e7f2      	b.n	800352a <__libc_init_array+0x1e>
 8003544:	080035ac 	.word	0x080035ac
 8003548:	080035ac 	.word	0x080035ac
 800354c:	080035ac 	.word	0x080035ac
 8003550:	080035b0 	.word	0x080035b0

08003554 <memset>:
 8003554:	4402      	add	r2, r0
 8003556:	4603      	mov	r3, r0
 8003558:	4293      	cmp	r3, r2
 800355a:	d100      	bne.n	800355e <memset+0xa>
 800355c:	4770      	bx	lr
 800355e:	f803 1b01 	strb.w	r1, [r3], #1
 8003562:	e7f9      	b.n	8003558 <memset+0x4>

08003564 <_init>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr

08003570 <_fini>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr
